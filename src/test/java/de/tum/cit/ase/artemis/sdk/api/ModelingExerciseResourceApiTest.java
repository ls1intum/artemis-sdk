/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.api;

import de.tum.cit.ase.artemis.sdk.*;
import de.tum.cit.ase.artemis.sdk.auth.*;
import java.io.File;
import de.tum.cit.ase.artemis.sdk.model.ModelingExercise;
import de.tum.cit.ase.artemis.sdk.model.ModelingPlagiarismResult;
import de.tum.cit.ase.artemis.sdk.model.PageableSearchDTOString;
import de.tum.cit.ase.artemis.sdk.model.SearchResultPageDTOModelingExercise;
import de.tum.cit.ase.artemis.sdk.model.SubmissionExportOptionsDTO;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelingExerciseResourceApi
 */
public class ModelingExerciseResourceApiTest {

    private final ModelingExerciseResourceApi api = new ModelingExerciseResourceApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkPlagiarism2Test() throws ApiException {
        //Long exerciseId = null;
        //Float similarityThreshold = null;
        //Integer minimumScore = null;
        //Integer minimumSize = null;
        //ModelingPlagiarismResult response = api.checkPlagiarism2(exerciseId, similarityThreshold, minimumScore, minimumSize);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelingExerciseTest() throws ApiException {
        //ModelingExercise modelingExercise = null;
        //ModelingExercise response = api.createModelingExercise(modelingExercise);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelingExerciseTest() throws ApiException {
        //Long exerciseId = null;
        //api.deleteModelingExercise(exerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSubmissions1Test() throws ApiException {
        //Long exerciseId = null;
        //SubmissionExportOptionsDTO submissionExportOptionsDTO = null;
        //File response = api.exportSubmissions1(exerciseId, submissionExportOptionsDTO);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllExercisesOnPage3Test() throws ApiException {
        //PageableSearchDTOString search = null;
        //Boolean isCourseFilter = null;
        //Boolean isExamFilter = null;
        //SearchResultPageDTOModelingExercise response = api.getAllExercisesOnPage3(search, isCourseFilter, isExamFilter);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelingExerciseTest() throws ApiException {
        //Long exerciseId = null;
        //ModelingExercise response = api.getModelingExercise(exerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelingExercisesForCourseTest() throws ApiException {
        //Long courseId = null;
        //List<ModelingExercise> response = api.getModelingExercisesForCourse(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlagiarismResult2Test() throws ApiException {
        //Long exerciseId = null;
        //ModelingPlagiarismResult response = api.getPlagiarismResult2(exerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importExercise2Test() throws ApiException {
        //Long sourceExerciseId = null;
        //ModelingExercise modelingExercise = null;
        //ModelingExercise response = api.importExercise2(sourceExerciseId, modelingExercise);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reEvaluateAndUpdateModelingExerciseTest() throws ApiException {
        //Long exerciseId = null;
        //ModelingExercise modelingExercise = null;
        //Boolean deleteFeedback = null;
        //ModelingExercise response = api.reEvaluateAndUpdateModelingExercise(exerciseId, modelingExercise, deleteFeedback);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelingExerciseTest() throws ApiException {
        //ModelingExercise modelingExercise = null;
        //String notificationText = null;
        //ModelingExercise response = api.updateModelingExercise(modelingExercise, notificationText);
        // TODO: test validations
    }

}
