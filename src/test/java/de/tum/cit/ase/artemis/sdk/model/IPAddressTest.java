/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.IPAddressNetworkObjectObjectObjectObjectObject;
import de.tum.cit.ase.artemis.sdk.model.IPAddressSection;
import de.tum.cit.ase.artemis.sdk.model.IPAddressSegment;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for IPAddress
 */
public class IPAddressTest {
    private final IPAddress model = new IPAddress();

    /**
     * Model tests for IPAddress
     */
    @Test
    public void testIPAddress() {
        // TODO: test IPAddress
    }

    /**
     * Test the property 'loopback'
     */
    @Test
    public void loopbackTest() {
        // TODO: test loopback
    }

    /**
     * Test the property 'networkPrefixLength'
     */
    @Test
    public void networkPrefixLengthTest() {
        // TODO: test networkPrefixLength
    }

    /**
     * Test the property 'lower'
     */
    @Test
    public void lowerTest() {
        // TODO: test lower
    }

    /**
     * Test the property 'upper'
     */
    @Test
    public void upperTest() {
        // TODO: test upper
    }

    /**
     * Test the property 'local'
     */
    @Test
    public void localTest() {
        // TODO: test local
    }

    /**
     * Test the property 'ipv4'
     */
    @Test
    public void ipv4Test() {
        // TODO: test ipv4
    }

    /**
     * Test the property 'section'
     */
    @Test
    public void sectionTest() {
        // TODO: test section
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'maxSegmentValue'
     */
    @Test
    public void maxSegmentValueTest() {
        // TODO: test maxSegmentValue
    }

    /**
     * Test the property 'nonZeroHostCount'
     */
    @Test
    public void nonZeroHostCountTest() {
        // TODO: test nonZeroHostCount
    }

    /**
     * Test the property 'bytesPerSegment'
     */
    @Test
    public void bytesPerSegmentTest() {
        // TODO: test bytesPerSegment
    }

    /**
     * Test the property 'bitsPerSegment'
     */
    @Test
    public void bitsPerSegmentTest() {
        // TODO: test bitsPerSegment
    }

    /**
     * Test the property 'byteCount'
     */
    @Test
    public void byteCountTest() {
        // TODO: test byteCount
    }

    /**
     * Test the property 'lowerNonZeroHost'
     */
    @Test
    public void lowerNonZeroHostTest() {
        // TODO: test lowerNonZeroHost
    }

    /**
     * Test the property 'sequentialBlockCount'
     */
    @Test
    public void sequentialBlockCountTest() {
        // TODO: test sequentialBlockCount
    }

    /**
     * Test the property 'iterable'
     */
    @Test
    public void iterableTest() {
        // TODO: test iterable
    }

    /**
     * Test the property 'ipaddress'
     */
    @Test
    public void ipaddressTest() {
        // TODO: test ipaddress
    }

    /**
     * Test the property 'ipversion'
     */
    @Test
    public void ipversionTest() {
        // TODO: test ipversion
    }

    /**
     * Test the property 'ipv4Convertible'
     */
    @Test
    public void ipv4ConvertibleTest() {
        // TODO: test ipv4Convertible
    }

    /**
     * Test the property 'ipv6Convertible'
     */
    @Test
    public void ipv6ConvertibleTest() {
        // TODO: test ipv6Convertible
    }

    /**
     * Test the property 'linkLocal'
     */
    @Test
    public void linkLocalTest() {
        // TODO: test linkLocal
    }

    /**
     * Test the property 'unspecified'
     */
    @Test
    public void unspecifiedTest() {
        // TODO: test unspecified
    }

    /**
     * Test the property 'anyLocal'
     */
    @Test
    public void anyLocalTest() {
        // TODO: test anyLocal
    }

    /**
     * Test the property 'zeroHost'
     */
    @Test
    public void zeroHostTest() {
        // TODO: test zeroHost
    }

    /**
     * Test the property 'hostMask'
     */
    @Test
    public void hostMaskTest() {
        // TODO: test hostMask
    }

    /**
     * Test the property 'networkMask'
     */
    @Test
    public void networkMaskTest() {
        // TODO: test networkMask
    }

    /**
     * Test the property 'singleNetwork'
     */
    @Test
    public void singleNetworkTest() {
        // TODO: test singleNetwork
    }

    /**
     * Test the property 'prefixLength'
     */
    @Test
    public void prefixLengthTest() {
        // TODO: test prefixLength
    }

    /**
     * Test the property 'ipv6'
     */
    @Test
    public void ipv6Test() {
        // TODO: test ipv6
    }

    /**
     * Test the property 'hostSection'
     */
    @Test
    public void hostSectionTest() {
        // TODO: test hostSection
    }

    /**
     * Test the property 'networkSection'
     */
    @Test
    public void networkSectionTest() {
        // TODO: test networkSection
    }

    /**
     * Test the property 'segments'
     */
    @Test
    public void segmentsTest() {
        // TODO: test segments
    }

    /**
     * Test the property 'count'
     */
    @Test
    public void countTest() {
        // TODO: test count
    }

    /**
     * Test the property 'bitCount'
     */
    @Test
    public void bitCountTest() {
        // TODO: test bitCount
    }

    /**
     * Test the property 'prefixed'
     */
    @Test
    public void prefixedTest() {
        // TODO: test prefixed
    }

    /**
     * Test the property 'prefixBlock'
     */
    @Test
    public void prefixBlockTest() {
        // TODO: test prefixBlock
    }

    /**
     * Test the property 'sequentialBlockIndex'
     */
    @Test
    public void sequentialBlockIndexTest() {
        // TODO: test sequentialBlockIndex
    }

    /**
     * Test the property 'sequential'
     */
    @Test
    public void sequentialTest() {
        // TODO: test sequential
    }

    /**
     * Test the property 'singlePrefixBlock'
     */
    @Test
    public void singlePrefixBlockTest() {
        // TODO: test singlePrefixBlock
    }

    /**
     * Test the property 'divisionStrings'
     */
    @Test
    public void divisionStringsTest() {
        // TODO: test divisionStrings
    }

    /**
     * Test the property 'prefixCount'
     */
    @Test
    public void prefixCountTest() {
        // TODO: test prefixCount
    }

    /**
     * Test the property 'bytes'
     */
    @Test
    public void bytesTest() {
        // TODO: test bytes
    }

    /**
     * Test the property 'value'
     */
    @Test
    public void valueTest() {
        // TODO: test value
    }

    /**
     * Test the property 'zero'
     */
    @Test
    public void zeroTest() {
        // TODO: test zero
    }

    /**
     * Test the property 'prefixLengthForSingleBlock'
     */
    @Test
    public void prefixLengthForSingleBlockTest() {
        // TODO: test prefixLengthForSingleBlock
    }

    /**
     * Test the property 'minPrefixLengthForBlock'
     */
    @Test
    public void minPrefixLengthForBlockTest() {
        // TODO: test minPrefixLengthForBlock
    }

    /**
     * Test the property 'fullRange'
     */
    @Test
    public void fullRangeTest() {
        // TODO: test fullRange
    }

    /**
     * Test the property 'upperBytes'
     */
    @Test
    public void upperBytesTest() {
        // TODO: test upperBytes
    }

    /**
     * Test the property 'upperValue'
     */
    @Test
    public void upperValueTest() {
        // TODO: test upperValue
    }

    /**
     * Test the property 'max'
     */
    @Test
    public void maxTest() {
        // TODO: test max
    }

    /**
     * Test the property 'multiple'
     */
    @Test
    public void multipleTest() {
        // TODO: test multiple
    }

    /**
     * Test the property 'divisionCount'
     */
    @Test
    public void divisionCountTest() {
        // TODO: test divisionCount
    }

    /**
     * Test the property 'segmentCount'
     */
    @Test
    public void segmentCountTest() {
        // TODO: test segmentCount
    }

    /**
     * Test the property 'segmentStrings'
     */
    @Test
    public void segmentStringsTest() {
        // TODO: test segmentStrings
    }

    /**
     * Test the property 'macaddress'
     */
    @Test
    public void macaddressTest() {
        // TODO: test macaddress
    }

    /**
     * Test the property 'multicast'
     */
    @Test
    public void multicastTest() {
        // TODO: test multicast
    }

}
