/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.api;

import de.tum.cit.ase.artemis.sdk.*;
import de.tum.cit.ase.artemis.sdk.auth.*;
import de.tum.cit.ase.artemis.sdk.model.Exam;
import de.tum.cit.ase.artemis.sdk.model.ExamChecklistDTO;
import de.tum.cit.ase.artemis.sdk.model.ExamInformationDTO;
import de.tum.cit.ase.artemis.sdk.model.ExamScoresDTO;
import de.tum.cit.ase.artemis.sdk.model.ExamUserDTO;
import de.tum.cit.ase.artemis.sdk.model.ExerciseGroup;
import java.io.File;
import de.tum.cit.ase.artemis.sdk.model.GetAllTextSubmissions200ResponseInner;
import de.tum.cit.ase.artemis.sdk.model.Pageable;
import de.tum.cit.ase.artemis.sdk.model.PageableSearchDTOString;
import de.tum.cit.ase.artemis.sdk.model.SearchResultPageDTOExam;
import de.tum.cit.ase.artemis.sdk.model.StatsForDashboardDTO;
import de.tum.cit.ase.artemis.sdk.model.StudentDTO;
import de.tum.cit.ase.artemis.sdk.model.StudentExam;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExamResourceApi
 */
public class ExamResourceApiTest {

    private final ExamResourceApi api = new ExamResourceApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStudentToExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //String studentLogin = null;
        //StudentDTO response = api.addStudentToExam(courseId, examId, studentLogin);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addStudentsToExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //List<ExamUserDTO> examUserDTO = null;
        //List<ExamUserDTO> response = api.addStudentsToExam(courseId, examId, examUserDTO);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //api.archiveExam(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExamTest() throws ApiException {
        //Long courseId = null;
        //Exam exam = null;
        //Exam response = api.createExam(courseId, exam);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //api.deleteExam(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadExamArchiveTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //File response = api.downloadExamArchive(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluateQuizExercisesTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Integer response = api.evaluateQuizExercises(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateMissingStudentExamsTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //List<StudentExam> response = api.generateMissingStudentExams(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateStudentExamsTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //List<StudentExam> response = api.generateStudentExams(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllActiveExamsTest() throws ApiException {
        //Pageable pageable = null;
        //List<Exam> response = api.getAllActiveExams(pageable);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllExamsOnPageTest() throws ApiException {
        //PageableSearchDTOString search = null;
        //Boolean withExercises = null;
        //SearchResultPageDTOExam response = api.getAllExamsOnPage(search, withExercises);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Boolean withStudents = null;
        //Boolean withExerciseGroups = null;
        //Exam response = api.getExam(courseId, examId, withStudents, withExerciseGroups);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamForAssessmentDashboardTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Exam response = api.getExamForAssessmentDashboard(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamForImportWithExercisesTest() throws ApiException {
        //Long examId = null;
        //Exam response = api.getExamForImportWithExercises(examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamForTestRunAssessmentDashboardTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Exam response = api.getExamForTestRunAssessmentDashboard(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamScoreTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //ExamScoresDTO response = api.getExamScore(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamStatisticsTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //ExamChecklistDTO response = api.getExamStatistics(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamTitleTest() throws ApiException {
        //Long examId = null;
        //String response = api.getExamTitle(examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamsForCourseTest() throws ApiException {
        //Long courseId = null;
        //List<Exam> response = api.getExamsForCourse(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamsWithQuizExercisesForUserTest() throws ApiException {
        //Long courseId = null;
        //List<Exam> response = api.getExamsWithQuizExercisesForUser(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestIndividualEndDateOfExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //ExamInformationDTO response = api.getLatestIndividualEndDateOfExam(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLockedSubmissionsForExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //List<GetAllTextSubmissions200ResponseInner> response = api.getLockedSubmissionsForExam(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatsForExamAssessmentDashboardTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //StatsForDashboardDTO response = api.getStatsForExamAssessmentDashboard(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStudentExamForStartTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //StudentExam response = api.getStudentExamForStart(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importExamWithExercisesTest() throws ApiException {
        //Long courseId = null;
        //Exam exam = null;
        //Exam response = api.importExamWithExercises(courseId, exam);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockAllRepositories1Test() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Integer response = api.lockAllRepositories1(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerCourseStudentsTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //api.registerCourseStudents(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAllStudentsFromExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Boolean withParticipationsAndSubmission = null;
        //api.removeAllStudentsFromExam(courseId, examId, withParticipationsAndSubmission);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeStudentFromExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //String studentLogin = null;
        //Boolean withParticipationsAndSubmission = null;
        //api.removeStudentFromExam(courseId, examId, studentLogin, withParticipationsAndSubmission);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetExamTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Exam response = api.resetExam(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockAllRepositories1Test() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //Integer response = api.unlockAllRepositories1(courseId, examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExamTest() throws ApiException {
        //Long courseId = null;
        //Exam exam = null;
        //Exam response = api.updateExam(courseId, exam);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderOfExerciseGroupsTest() throws ApiException {
        //Long courseId = null;
        //Long examId = null;
        //List<ExerciseGroup> exerciseGroup = null;
        //List<ExerciseGroup> response = api.updateOrderOfExerciseGroups(courseId, examId, exerciseGroup);
        // TODO: test validations
    }

}
