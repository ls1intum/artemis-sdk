/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.api;

import de.tum.cit.ase.artemis.sdk.*;
import de.tum.cit.ase.artemis.sdk.auth.*;
import de.tum.cit.ase.artemis.sdk.model.PageableSearchDTOString;
import de.tum.cit.ase.artemis.sdk.model.QuizBatch;
import de.tum.cit.ase.artemis.sdk.model.QuizBatchJoinDTO;
import de.tum.cit.ase.artemis.sdk.model.QuizExercise;
import de.tum.cit.ase.artemis.sdk.model.SearchResultPageDTOQuizExercise;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuizExerciseResourceApi
 */
public class QuizExerciseResourceApiTest {

    private final QuizExerciseResourceApi api = new QuizExerciseResourceApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBatchTest() throws ApiException {
        //Long quizExerciseId = null;
        //QuizBatch response = api.addBatch(quizExerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuizExerciseTest() throws ApiException {
        //QuizExercise quizExercise = null;
        //QuizExercise response = api.createQuizExercise(quizExercise);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQuizExerciseTest() throws ApiException {
        //Long quizExerciseId = null;
        //api.deleteQuizExercise(quizExerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllExercisesOnPage1Test() throws ApiException {
        //PageableSearchDTOString search = null;
        //Boolean isCourseFilter = null;
        //Boolean isExamFilter = null;
        //SearchResultPageDTOQuizExercise response = api.getAllExercisesOnPage1(search, isCourseFilter, isExamFilter);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuizExerciseTest() throws ApiException {
        //Long quizExerciseId = null;
        //QuizExercise response = api.getQuizExercise(quizExerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuizExerciseForStudentTest() throws ApiException {
        //Long quizExerciseId = null;
        //QuizExercise response = api.getQuizExerciseForStudent(quizExerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuizExercisesForCourseTest() throws ApiException {
        //Long courseId = null;
        //List<QuizExercise> response = api.getQuizExercisesForCourse(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuizExercisesForExamTest() throws ApiException {
        //Long examId = null;
        //List<QuizExercise> response = api.getQuizExercisesForExam(examId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importExercise1Test() throws ApiException {
        //Long sourceExerciseId = null;
        //QuizExercise quizExercise = null;
        //QuizExercise response = api.importExercise1(sourceExerciseId, quizExercise);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinBatchTest() throws ApiException {
        //Long quizExerciseId = null;
        //QuizBatchJoinDTO quizBatchJoinDTO = null;
        //QuizBatch response = api.joinBatch(quizExerciseId, quizBatchJoinDTO);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performActionForQuizExerciseTest() throws ApiException {
        //Long quizExerciseId = null;
        //String action = null;
        //QuizExercise response = api.performActionForQuizExercise(quizExerciseId, action);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reEvaluateQuizExerciseTest() throws ApiException {
        //Long quizExerciseId = null;
        //QuizExercise quizExercise = null;
        //QuizExercise response = api.reEvaluateQuizExercise(quizExerciseId, quizExercise);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recalculateStatisticsTest() throws ApiException {
        //Long quizExerciseId = null;
        //QuizExercise response = api.recalculateStatistics(quizExerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBatchTest() throws ApiException {
        //Long quizBatchId = null;
        //QuizBatch response = api.startBatch(quizBatchId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuizExerciseTest() throws ApiException {
        //QuizExercise quizExercise = null;
        //String notificationText = null;
        //QuizExercise response = api.updateQuizExercise(quizExercise, notificationText);
        // TODO: test validations
    }

}
