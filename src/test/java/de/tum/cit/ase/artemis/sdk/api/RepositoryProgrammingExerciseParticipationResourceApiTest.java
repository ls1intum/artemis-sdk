/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.api;

import de.tum.cit.ase.artemis.sdk.*;
import de.tum.cit.ase.artemis.sdk.auth.*;
import de.tum.cit.ase.artemis.sdk.model.BuildLogEntry;
import de.tum.cit.ase.artemis.sdk.model.FileMove;
import de.tum.cit.ase.artemis.sdk.model.FileSubmission;
import de.tum.cit.ase.artemis.sdk.model.RepositoryStatusDTO;
import java.util.Set;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoryProgrammingExerciseParticipationResourceApi
 */
public class RepositoryProgrammingExerciseParticipationResourceApiTest {

    private final RepositoryProgrammingExerciseParticipationResourceApi api = new RepositoryProgrammingExerciseParticipationResourceApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commitChanges1Test() throws ApiException {
        //Long participationId = null;
        //api.commitChanges1(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFile1Test() throws ApiException {
        //Long participationId = null;
        //String _file = null;
        //api.createFile1(participationId, _file);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFolder1Test() throws ApiException {
        //Long participationId = null;
        //String folder = null;
        //api.createFolder1(participationId, folder);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFile1Test() throws ApiException {
        //Long participationId = null;
        //String _file = null;
        //api.deleteFile1(participationId, _file);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuildLogsTest() throws ApiException {
        //Long participationId = null;
        //Long resultId = null;
        //List<BuildLogEntry> response = api.getBuildLogs(participationId, resultId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFile1Test() throws ApiException {
        //Long participationId = null;
        //String _file = null;
        //List<byte[]> response = api.getFile1(participationId, _file);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileNamesTest() throws ApiException {
        //Long participationId = null;
        //Set<String> response = api.getFileNames(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFiles1Test() throws ApiException {
        //Long participationId = null;
        //Map<String, String> response = api.getFiles1(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesWithContentTest() throws ApiException {
        //Long participationId = null;
        //Map<String, String> response = api.getFilesWithContent(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesWithInformationAboutChangeTest() throws ApiException {
        //Long participationId = null;
        //Map<String, Boolean> response = api.getFilesWithInformationAboutChange(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatus1Test() throws ApiException {
        //Long participationId = null;
        //RepositoryStatusDTO response = api.getStatus1(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullChanges1Test() throws ApiException {
        //Long participationId = null;
        //api.pullChanges1(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameFile1Test() throws ApiException {
        //Long participationId = null;
        //FileMove fileMove = null;
        //api.renameFile1(participationId, fileMove);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetToLastCommit1Test() throws ApiException {
        //Long participationId = null;
        //api.resetToLastCommit1(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParticipationFilesTest() throws ApiException {
        //Long participationId = null;
        //List<FileSubmission> fileSubmission = null;
        //Boolean commit = null;
        //Map<String, String> response = api.updateParticipationFiles(participationId, fileSubmission, commit);
        // TODO: test validations
    }

}
