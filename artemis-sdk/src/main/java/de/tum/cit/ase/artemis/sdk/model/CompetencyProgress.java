/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.Competency;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * CompetencyProgress
 */
@JsonPropertyOrder({
  CompetencyProgress.JSON_PROPERTY_PROGRESS,
  CompetencyProgress.JSON_PROPERTY_CONFIDENCE,
  CompetencyProgress.JSON_PROPERTY_COMPETENCY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-10T14:33:20.156837Z[Etc/UTC]")
public class CompetencyProgress {
  public static final String JSON_PROPERTY_PROGRESS = "progress";
  private Double progress;

  public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
  private Double confidence;

  public static final String JSON_PROPERTY_COMPETENCY = "competency";
  private Competency competency;

  public CompetencyProgress() { 
  }

  public CompetencyProgress progress(Double progress) {
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getProgress() {
    return progress;
  }


  @JsonProperty(JSON_PROPERTY_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProgress(Double progress) {
    this.progress = progress;
  }


  public CompetencyProgress confidence(Double confidence) {
    this.confidence = confidence;
    return this;
  }

   /**
   * Get confidence
   * @return confidence
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getConfidence() {
    return confidence;
  }


  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidence(Double confidence) {
    this.confidence = confidence;
  }


  public CompetencyProgress competency(Competency competency) {
    this.competency = competency;
    return this;
  }

   /**
   * Get competency
   * @return competency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPETENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Competency getCompetency() {
    return competency;
  }


  @JsonProperty(JSON_PROPERTY_COMPETENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompetency(Competency competency) {
    this.competency = competency;
  }


  /**
   * Return true if this CompetencyProgress object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompetencyProgress competencyProgress = (CompetencyProgress) o;
    return Objects.equals(this.progress, competencyProgress.progress) &&
        Objects.equals(this.confidence, competencyProgress.confidence) &&
        Objects.equals(this.competency, competencyProgress.competency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(progress, confidence, competency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompetencyProgress {\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    competency: ").append(toIndentedString(competency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

