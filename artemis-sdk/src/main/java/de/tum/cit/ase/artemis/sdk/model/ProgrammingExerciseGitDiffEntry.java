/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseGitDiffReport;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * ProgrammingExerciseGitDiffEntry
 */
@JsonPropertyOrder({
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_ID,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_GIT_DIFF_REPORT,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_PREVIOUS_FILE_PATH,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_FILE_PATH,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_PREVIOUS_START_LINE,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_START_LINE,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_PREVIOUS_LINE_COUNT,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_LINE_COUNT,
  ProgrammingExerciseGitDiffEntry.JSON_PROPERTY_EMPTY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-10T14:33:20.156837Z[Etc/UTC]")
public class ProgrammingExerciseGitDiffEntry {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_GIT_DIFF_REPORT = "gitDiffReport";
  private ProgrammingExerciseGitDiffReport gitDiffReport;

  public static final String JSON_PROPERTY_PREVIOUS_FILE_PATH = "previousFilePath";
  private String previousFilePath;

  public static final String JSON_PROPERTY_FILE_PATH = "filePath";
  private String filePath;

  public static final String JSON_PROPERTY_PREVIOUS_START_LINE = "previousStartLine";
  private Integer previousStartLine;

  public static final String JSON_PROPERTY_START_LINE = "startLine";
  private Integer startLine;

  public static final String JSON_PROPERTY_PREVIOUS_LINE_COUNT = "previousLineCount";
  private Integer previousLineCount;

  public static final String JSON_PROPERTY_LINE_COUNT = "lineCount";
  private Integer lineCount;

  public static final String JSON_PROPERTY_EMPTY = "empty";
  private Boolean empty;

  public ProgrammingExerciseGitDiffEntry() { 
  }

  public ProgrammingExerciseGitDiffEntry id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ProgrammingExerciseGitDiffEntry gitDiffReport(ProgrammingExerciseGitDiffReport gitDiffReport) {
    this.gitDiffReport = gitDiffReport;
    return this;
  }

   /**
   * Get gitDiffReport
   * @return gitDiffReport
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GIT_DIFF_REPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProgrammingExerciseGitDiffReport getGitDiffReport() {
    return gitDiffReport;
  }


  @JsonProperty(JSON_PROPERTY_GIT_DIFF_REPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGitDiffReport(ProgrammingExerciseGitDiffReport gitDiffReport) {
    this.gitDiffReport = gitDiffReport;
  }


  public ProgrammingExerciseGitDiffEntry previousFilePath(String previousFilePath) {
    this.previousFilePath = previousFilePath;
    return this;
  }

   /**
   * Get previousFilePath
   * @return previousFilePath
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviousFilePath() {
    return previousFilePath;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousFilePath(String previousFilePath) {
    this.previousFilePath = previousFilePath;
  }


  public ProgrammingExerciseGitDiffEntry filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFilePath() {
    return filePath;
  }


  @JsonProperty(JSON_PROPERTY_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public ProgrammingExerciseGitDiffEntry previousStartLine(Integer previousStartLine) {
    this.previousStartLine = previousStartLine;
    return this;
  }

   /**
   * Get previousStartLine
   * @return previousStartLine
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_START_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPreviousStartLine() {
    return previousStartLine;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_START_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousStartLine(Integer previousStartLine) {
    this.previousStartLine = previousStartLine;
  }


  public ProgrammingExerciseGitDiffEntry startLine(Integer startLine) {
    this.startLine = startLine;
    return this;
  }

   /**
   * Get startLine
   * @return startLine
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStartLine() {
    return startLine;
  }


  @JsonProperty(JSON_PROPERTY_START_LINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartLine(Integer startLine) {
    this.startLine = startLine;
  }


  public ProgrammingExerciseGitDiffEntry previousLineCount(Integer previousLineCount) {
    this.previousLineCount = previousLineCount;
    return this;
  }

   /**
   * Get previousLineCount
   * @return previousLineCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_LINE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPreviousLineCount() {
    return previousLineCount;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_LINE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousLineCount(Integer previousLineCount) {
    this.previousLineCount = previousLineCount;
  }


  public ProgrammingExerciseGitDiffEntry lineCount(Integer lineCount) {
    this.lineCount = lineCount;
    return this;
  }

   /**
   * Get lineCount
   * @return lineCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLineCount() {
    return lineCount;
  }


  @JsonProperty(JSON_PROPERTY_LINE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLineCount(Integer lineCount) {
    this.lineCount = lineCount;
  }


  public ProgrammingExerciseGitDiffEntry empty(Boolean empty) {
    this.empty = empty;
    return this;
  }

   /**
   * Get empty
   * @return empty
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmpty() {
    return empty;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmpty(Boolean empty) {
    this.empty = empty;
  }


  /**
   * Return true if this ProgrammingExerciseGitDiffEntry object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseGitDiffEntry programmingExerciseGitDiffEntry = (ProgrammingExerciseGitDiffEntry) o;
    return Objects.equals(this.id, programmingExerciseGitDiffEntry.id) &&
        Objects.equals(this.gitDiffReport, programmingExerciseGitDiffEntry.gitDiffReport) &&
        Objects.equals(this.previousFilePath, programmingExerciseGitDiffEntry.previousFilePath) &&
        Objects.equals(this.filePath, programmingExerciseGitDiffEntry.filePath) &&
        Objects.equals(this.previousStartLine, programmingExerciseGitDiffEntry.previousStartLine) &&
        Objects.equals(this.startLine, programmingExerciseGitDiffEntry.startLine) &&
        Objects.equals(this.previousLineCount, programmingExerciseGitDiffEntry.previousLineCount) &&
        Objects.equals(this.lineCount, programmingExerciseGitDiffEntry.lineCount) &&
        Objects.equals(this.empty, programmingExerciseGitDiffEntry.empty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, gitDiffReport, previousFilePath, filePath, previousStartLine, startLine, previousLineCount, lineCount, empty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseGitDiffEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    gitDiffReport: ").append(toIndentedString(gitDiffReport)).append("\n");
    sb.append("    previousFilePath: ").append(toIndentedString(previousFilePath)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    previousStartLine: ").append(toIndentedString(previousStartLine)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("    previousLineCount: ").append(toIndentedString(previousLineCount)).append("\n");
    sb.append("    lineCount: ").append(toIndentedString(lineCount)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

