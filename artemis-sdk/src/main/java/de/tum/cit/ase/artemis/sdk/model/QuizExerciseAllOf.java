/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.QuizBatch;
import de.tum.cit.ase.artemis.sdk.model.QuizPointStatistic;
import de.tum.cit.ase.artemis.sdk.model.QuizQuestion;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * QuizExerciseAllOf
 */
@JsonPropertyOrder({
  QuizExerciseAllOf.JSON_PROPERTY_TYPE,
  QuizExerciseAllOf.JSON_PROPERTY_RANDOMIZE_QUESTION_ORDER,
  QuizExerciseAllOf.JSON_PROPERTY_ALLOWED_NUMBER_OF_ATTEMPTS,
  QuizExerciseAllOf.JSON_PROPERTY_REMAINING_NUMBER_OF_ATTEMPTS,
  QuizExerciseAllOf.JSON_PROPERTY_IS_OPEN_FOR_PRACTICE,
  QuizExerciseAllOf.JSON_PROPERTY_QUIZ_MODE,
  QuizExerciseAllOf.JSON_PROPERTY_DURATION,
  QuizExerciseAllOf.JSON_PROPERTY_QUIZ_POINT_STATISTIC,
  QuizExerciseAllOf.JSON_PROPERTY_QUIZ_QUESTIONS,
  QuizExerciseAllOf.JSON_PROPERTY_QUIZ_BATCHES,
  QuizExerciseAllOf.JSON_PROPERTY_QUIZ_STARTED,
  QuizExerciseAllOf.JSON_PROPERTY_QUIZ_ENDED
})
@JsonTypeName("QuizExercise_allOf")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-27T15:31:11.360443Z[Etc/UTC]")
public class QuizExerciseAllOf {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_RANDOMIZE_QUESTION_ORDER = "randomizeQuestionOrder";
  private Boolean randomizeQuestionOrder;

  public static final String JSON_PROPERTY_ALLOWED_NUMBER_OF_ATTEMPTS = "allowedNumberOfAttempts";
  private Integer allowedNumberOfAttempts;

  public static final String JSON_PROPERTY_REMAINING_NUMBER_OF_ATTEMPTS = "remainingNumberOfAttempts";
  private Integer remainingNumberOfAttempts;

  public static final String JSON_PROPERTY_IS_OPEN_FOR_PRACTICE = "isOpenForPractice";
  private Boolean isOpenForPractice;

  /**
   * Gets or Sets quizMode
   */
  public enum QuizModeEnum {
    SYNCHRONIZED("SYNCHRONIZED"),
    
    BATCHED("BATCHED"),
    
    INDIVIDUAL("INDIVIDUAL");

    private String value;

    QuizModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QuizModeEnum fromValue(String value) {
      for (QuizModeEnum b : QuizModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_QUIZ_MODE = "quizMode";
  private QuizModeEnum quizMode;

  public static final String JSON_PROPERTY_DURATION = "duration";
  private Integer duration;

  public static final String JSON_PROPERTY_QUIZ_POINT_STATISTIC = "quizPointStatistic";
  private QuizPointStatistic quizPointStatistic;

  public static final String JSON_PROPERTY_QUIZ_QUESTIONS = "quizQuestions";
  private List<QuizQuestion> quizQuestions = new ArrayList<>();

  public static final String JSON_PROPERTY_QUIZ_BATCHES = "quizBatches";
  private Set<QuizBatch> quizBatches = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_QUIZ_STARTED = "quizStarted";
  private Boolean quizStarted;

  public static final String JSON_PROPERTY_QUIZ_ENDED = "quizEnded";
  private Boolean quizEnded;

  public QuizExerciseAllOf() { 
  }

  public QuizExerciseAllOf type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public QuizExerciseAllOf randomizeQuestionOrder(Boolean randomizeQuestionOrder) {
    this.randomizeQuestionOrder = randomizeQuestionOrder;
    return this;
  }

   /**
   * Get randomizeQuestionOrder
   * @return randomizeQuestionOrder
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RANDOMIZE_QUESTION_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRandomizeQuestionOrder() {
    return randomizeQuestionOrder;
  }


  @JsonProperty(JSON_PROPERTY_RANDOMIZE_QUESTION_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRandomizeQuestionOrder(Boolean randomizeQuestionOrder) {
    this.randomizeQuestionOrder = randomizeQuestionOrder;
  }


  public QuizExerciseAllOf allowedNumberOfAttempts(Integer allowedNumberOfAttempts) {
    this.allowedNumberOfAttempts = allowedNumberOfAttempts;
    return this;
  }

   /**
   * Get allowedNumberOfAttempts
   * @return allowedNumberOfAttempts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_NUMBER_OF_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAllowedNumberOfAttempts() {
    return allowedNumberOfAttempts;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_NUMBER_OF_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedNumberOfAttempts(Integer allowedNumberOfAttempts) {
    this.allowedNumberOfAttempts = allowedNumberOfAttempts;
  }


  public QuizExerciseAllOf remainingNumberOfAttempts(Integer remainingNumberOfAttempts) {
    this.remainingNumberOfAttempts = remainingNumberOfAttempts;
    return this;
  }

   /**
   * Get remainingNumberOfAttempts
   * @return remainingNumberOfAttempts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMAINING_NUMBER_OF_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRemainingNumberOfAttempts() {
    return remainingNumberOfAttempts;
  }


  @JsonProperty(JSON_PROPERTY_REMAINING_NUMBER_OF_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemainingNumberOfAttempts(Integer remainingNumberOfAttempts) {
    this.remainingNumberOfAttempts = remainingNumberOfAttempts;
  }


  public QuizExerciseAllOf isOpenForPractice(Boolean isOpenForPractice) {
    this.isOpenForPractice = isOpenForPractice;
    return this;
  }

   /**
   * Get isOpenForPractice
   * @return isOpenForPractice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_OPEN_FOR_PRACTICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsOpenForPractice() {
    return isOpenForPractice;
  }


  @JsonProperty(JSON_PROPERTY_IS_OPEN_FOR_PRACTICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsOpenForPractice(Boolean isOpenForPractice) {
    this.isOpenForPractice = isOpenForPractice;
  }


  public QuizExerciseAllOf quizMode(QuizModeEnum quizMode) {
    this.quizMode = quizMode;
    return this;
  }

   /**
   * Get quizMode
   * @return quizMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUIZ_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QuizModeEnum getQuizMode() {
    return quizMode;
  }


  @JsonProperty(JSON_PROPERTY_QUIZ_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuizMode(QuizModeEnum quizMode) {
    this.quizMode = quizMode;
  }


  public QuizExerciseAllOf duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDuration() {
    return duration;
  }


  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public QuizExerciseAllOf quizPointStatistic(QuizPointStatistic quizPointStatistic) {
    this.quizPointStatistic = quizPointStatistic;
    return this;
  }

   /**
   * Get quizPointStatistic
   * @return quizPointStatistic
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUIZ_POINT_STATISTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QuizPointStatistic getQuizPointStatistic() {
    return quizPointStatistic;
  }


  @JsonProperty(JSON_PROPERTY_QUIZ_POINT_STATISTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuizPointStatistic(QuizPointStatistic quizPointStatistic) {
    this.quizPointStatistic = quizPointStatistic;
  }


  public QuizExerciseAllOf quizQuestions(List<QuizQuestion> quizQuestions) {
    this.quizQuestions = quizQuestions;
    return this;
  }

  public QuizExerciseAllOf addQuizQuestionsItem(QuizQuestion quizQuestionsItem) {
    if (this.quizQuestions == null) {
      this.quizQuestions = new ArrayList<>();
    }
    this.quizQuestions.add(quizQuestionsItem);
    return this;
  }

   /**
   * Get quizQuestions
   * @return quizQuestions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUIZ_QUESTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<QuizQuestion> getQuizQuestions() {
    return quizQuestions;
  }


  @JsonProperty(JSON_PROPERTY_QUIZ_QUESTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuizQuestions(List<QuizQuestion> quizQuestions) {
    this.quizQuestions = quizQuestions;
  }


  public QuizExerciseAllOf quizBatches(Set<QuizBatch> quizBatches) {
    this.quizBatches = quizBatches;
    return this;
  }

  public QuizExerciseAllOf addQuizBatchesItem(QuizBatch quizBatchesItem) {
    if (this.quizBatches == null) {
      this.quizBatches = new LinkedHashSet<>();
    }
    this.quizBatches.add(quizBatchesItem);
    return this;
  }

   /**
   * Get quizBatches
   * @return quizBatches
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUIZ_BATCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<QuizBatch> getQuizBatches() {
    return quizBatches;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_QUIZ_BATCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuizBatches(Set<QuizBatch> quizBatches) {
    this.quizBatches = quizBatches;
  }


  public QuizExerciseAllOf quizStarted(Boolean quizStarted) {
    this.quizStarted = quizStarted;
    return this;
  }

   /**
   * Get quizStarted
   * @return quizStarted
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUIZ_STARTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getQuizStarted() {
    return quizStarted;
  }


  @JsonProperty(JSON_PROPERTY_QUIZ_STARTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuizStarted(Boolean quizStarted) {
    this.quizStarted = quizStarted;
  }


  public QuizExerciseAllOf quizEnded(Boolean quizEnded) {
    this.quizEnded = quizEnded;
    return this;
  }

   /**
   * Get quizEnded
   * @return quizEnded
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUIZ_ENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getQuizEnded() {
    return quizEnded;
  }


  @JsonProperty(JSON_PROPERTY_QUIZ_ENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuizEnded(Boolean quizEnded) {
    this.quizEnded = quizEnded;
  }


  /**
   * Return true if this QuizExercise_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizExerciseAllOf quizExerciseAllOf = (QuizExerciseAllOf) o;
    return Objects.equals(this.type, quizExerciseAllOf.type) &&
        Objects.equals(this.randomizeQuestionOrder, quizExerciseAllOf.randomizeQuestionOrder) &&
        Objects.equals(this.allowedNumberOfAttempts, quizExerciseAllOf.allowedNumberOfAttempts) &&
        Objects.equals(this.remainingNumberOfAttempts, quizExerciseAllOf.remainingNumberOfAttempts) &&
        Objects.equals(this.isOpenForPractice, quizExerciseAllOf.isOpenForPractice) &&
        Objects.equals(this.quizMode, quizExerciseAllOf.quizMode) &&
        Objects.equals(this.duration, quizExerciseAllOf.duration) &&
        Objects.equals(this.quizPointStatistic, quizExerciseAllOf.quizPointStatistic) &&
        Objects.equals(this.quizQuestions, quizExerciseAllOf.quizQuestions) &&
        Objects.equals(this.quizBatches, quizExerciseAllOf.quizBatches) &&
        Objects.equals(this.quizStarted, quizExerciseAllOf.quizStarted) &&
        Objects.equals(this.quizEnded, quizExerciseAllOf.quizEnded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, randomizeQuestionOrder, allowedNumberOfAttempts, remainingNumberOfAttempts, isOpenForPractice, quizMode, duration, quizPointStatistic, quizQuestions, quizBatches, quizStarted, quizEnded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizExerciseAllOf {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    randomizeQuestionOrder: ").append(toIndentedString(randomizeQuestionOrder)).append("\n");
    sb.append("    allowedNumberOfAttempts: ").append(toIndentedString(allowedNumberOfAttempts)).append("\n");
    sb.append("    remainingNumberOfAttempts: ").append(toIndentedString(remainingNumberOfAttempts)).append("\n");
    sb.append("    isOpenForPractice: ").append(toIndentedString(isOpenForPractice)).append("\n");
    sb.append("    quizMode: ").append(toIndentedString(quizMode)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    quizPointStatistic: ").append(toIndentedString(quizPointStatistic)).append("\n");
    sb.append("    quizQuestions: ").append(toIndentedString(quizQuestions)).append("\n");
    sb.append("    quizBatches: ").append(toIndentedString(quizBatches)).append("\n");
    sb.append("    quizStarted: ").append(toIndentedString(quizStarted)).append("\n");
    sb.append("    quizEnded: ").append(toIndentedString(quizEnded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

