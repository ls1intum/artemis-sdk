/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.Exercise;
import de.tum.cit.ase.artemis.sdk.model.GetAllTextSubmissions200ResponseInner;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExercise;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseStudentParticipation;
import de.tum.cit.ase.artemis.sdk.model.Result;
import de.tum.cit.ase.artemis.sdk.model.SolutionProgrammingExerciseParticipation;
import de.tum.cit.ase.artemis.sdk.model.StudentParticipation;
import de.tum.cit.ase.artemis.sdk.model.Team;
import de.tum.cit.ase.artemis.sdk.model.TemplateProgrammingExerciseParticipation;
import de.tum.cit.ase.artemis.sdk.model.User;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import de.tum.cit.ase.artemis.sdk.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-30T13:56:33.435320Z[Etc/UTC]")
@JsonDeserialize(using = CleanupBuildPlan200Response.CleanupBuildPlan200ResponseDeserializer.class)
@JsonSerialize(using = CleanupBuildPlan200Response.CleanupBuildPlan200ResponseSerializer.class)
public class CleanupBuildPlan200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CleanupBuildPlan200Response.class.getName());

    public static class CleanupBuildPlan200ResponseSerializer extends StdSerializer<CleanupBuildPlan200Response> {
        public CleanupBuildPlan200ResponseSerializer(Class<CleanupBuildPlan200Response> t) {
            super(t);
        }

        public CleanupBuildPlan200ResponseSerializer() {
            this(null);
        }

        @Override
        public void serialize(CleanupBuildPlan200Response value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class CleanupBuildPlan200ResponseDeserializer extends StdDeserializer<CleanupBuildPlan200Response> {
        public CleanupBuildPlan200ResponseDeserializer() {
            this(CleanupBuildPlan200Response.class);
        }

        public CleanupBuildPlan200ResponseDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public CleanupBuildPlan200Response deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize ProgrammingExerciseStudentParticipation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ProgrammingExerciseStudentParticipation.class.equals(Integer.class) || ProgrammingExerciseStudentParticipation.class.equals(Long.class) || ProgrammingExerciseStudentParticipation.class.equals(Float.class) || ProgrammingExerciseStudentParticipation.class.equals(Double.class) || ProgrammingExerciseStudentParticipation.class.equals(Boolean.class) || ProgrammingExerciseStudentParticipation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ProgrammingExerciseStudentParticipation.class.equals(Integer.class) || ProgrammingExerciseStudentParticipation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ProgrammingExerciseStudentParticipation.class.equals(Float.class) || ProgrammingExerciseStudentParticipation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ProgrammingExerciseStudentParticipation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ProgrammingExerciseStudentParticipation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ProgrammingExerciseStudentParticipation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ProgrammingExerciseStudentParticipation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ProgrammingExerciseStudentParticipation'", e);
            }

            // deserialize SolutionProgrammingExerciseParticipation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (SolutionProgrammingExerciseParticipation.class.equals(Integer.class) || SolutionProgrammingExerciseParticipation.class.equals(Long.class) || SolutionProgrammingExerciseParticipation.class.equals(Float.class) || SolutionProgrammingExerciseParticipation.class.equals(Double.class) || SolutionProgrammingExerciseParticipation.class.equals(Boolean.class) || SolutionProgrammingExerciseParticipation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((SolutionProgrammingExerciseParticipation.class.equals(Integer.class) || SolutionProgrammingExerciseParticipation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((SolutionProgrammingExerciseParticipation.class.equals(Float.class) || SolutionProgrammingExerciseParticipation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (SolutionProgrammingExerciseParticipation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (SolutionProgrammingExerciseParticipation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(SolutionProgrammingExerciseParticipation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'SolutionProgrammingExerciseParticipation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'SolutionProgrammingExerciseParticipation'", e);
            }

            // deserialize StudentParticipation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (StudentParticipation.class.equals(Integer.class) || StudentParticipation.class.equals(Long.class) || StudentParticipation.class.equals(Float.class) || StudentParticipation.class.equals(Double.class) || StudentParticipation.class.equals(Boolean.class) || StudentParticipation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((StudentParticipation.class.equals(Integer.class) || StudentParticipation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((StudentParticipation.class.equals(Float.class) || StudentParticipation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (StudentParticipation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (StudentParticipation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(StudentParticipation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'StudentParticipation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'StudentParticipation'", e);
            }

            // deserialize TemplateProgrammingExerciseParticipation
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (TemplateProgrammingExerciseParticipation.class.equals(Integer.class) || TemplateProgrammingExerciseParticipation.class.equals(Long.class) || TemplateProgrammingExerciseParticipation.class.equals(Float.class) || TemplateProgrammingExerciseParticipation.class.equals(Double.class) || TemplateProgrammingExerciseParticipation.class.equals(Boolean.class) || TemplateProgrammingExerciseParticipation.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((TemplateProgrammingExerciseParticipation.class.equals(Integer.class) || TemplateProgrammingExerciseParticipation.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((TemplateProgrammingExerciseParticipation.class.equals(Float.class) || TemplateProgrammingExerciseParticipation.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (TemplateProgrammingExerciseParticipation.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (TemplateProgrammingExerciseParticipation.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TemplateProgrammingExerciseParticipation.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'TemplateProgrammingExerciseParticipation'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'TemplateProgrammingExerciseParticipation'", e);
            }

            if (match == 1) {
                CleanupBuildPlan200Response ret = new CleanupBuildPlan200Response();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for CleanupBuildPlan200Response: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public CleanupBuildPlan200Response getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "CleanupBuildPlan200Response cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public CleanupBuildPlan200Response() {
        super("oneOf", Boolean.FALSE);
    }

    public CleanupBuildPlan200Response(ProgrammingExerciseStudentParticipation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CleanupBuildPlan200Response(SolutionProgrammingExerciseParticipation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CleanupBuildPlan200Response(StudentParticipation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CleanupBuildPlan200Response(TemplateProgrammingExerciseParticipation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ProgrammingExerciseStudentParticipation", new GenericType<ProgrammingExerciseStudentParticipation>() {
        });
        schemas.put("SolutionProgrammingExerciseParticipation", new GenericType<SolutionProgrammingExerciseParticipation>() {
        });
        schemas.put("StudentParticipation", new GenericType<StudentParticipation>() {
        });
        schemas.put("TemplateProgrammingExerciseParticipation", new GenericType<TemplateProgrammingExerciseParticipation>() {
        });
        JSON.registerDescendants(CleanupBuildPlan200Response.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("ProgrammingExerciseStudentParticipation", ProgrammingExerciseStudentParticipation.class);
        mappings.put("SolutionProgrammingExerciseParticipation", SolutionProgrammingExerciseParticipation.class);
        mappings.put("StudentParticipation", StudentParticipation.class);
        mappings.put("TemplateProgrammingExerciseParticipation", TemplateProgrammingExerciseParticipation.class);
        mappings.put("cleanupBuildPlan_200_response", CleanupBuildPlan200Response.class);
        JSON.registerDiscriminator(CleanupBuildPlan200Response.class, "type", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return CleanupBuildPlan200Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ProgrammingExerciseStudentParticipation, SolutionProgrammingExerciseParticipation, StudentParticipation, TemplateProgrammingExerciseParticipation
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(ProgrammingExerciseStudentParticipation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SolutionProgrammingExerciseParticipation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(StudentParticipation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TemplateProgrammingExerciseParticipation.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ProgrammingExerciseStudentParticipation, SolutionProgrammingExerciseParticipation, StudentParticipation, TemplateProgrammingExerciseParticipation");
    }

    /**
     * Get the actual instance, which can be the following:
     * ProgrammingExerciseStudentParticipation, SolutionProgrammingExerciseParticipation, StudentParticipation, TemplateProgrammingExerciseParticipation
     *
     * @return The actual instance (ProgrammingExerciseStudentParticipation, SolutionProgrammingExerciseParticipation, StudentParticipation, TemplateProgrammingExerciseParticipation)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ProgrammingExerciseStudentParticipation`. If the actual instance is not `ProgrammingExerciseStudentParticipation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProgrammingExerciseStudentParticipation`
     * @throws ClassCastException if the instance is not `ProgrammingExerciseStudentParticipation`
     */
    public ProgrammingExerciseStudentParticipation getProgrammingExerciseStudentParticipation() throws ClassCastException {
        return (ProgrammingExerciseStudentParticipation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SolutionProgrammingExerciseParticipation`. If the actual instance is not `SolutionProgrammingExerciseParticipation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SolutionProgrammingExerciseParticipation`
     * @throws ClassCastException if the instance is not `SolutionProgrammingExerciseParticipation`
     */
    public SolutionProgrammingExerciseParticipation getSolutionProgrammingExerciseParticipation() throws ClassCastException {
        return (SolutionProgrammingExerciseParticipation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StudentParticipation`. If the actual instance is not `StudentParticipation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StudentParticipation`
     * @throws ClassCastException if the instance is not `StudentParticipation`
     */
    public StudentParticipation getStudentParticipation() throws ClassCastException {
        return (StudentParticipation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TemplateProgrammingExerciseParticipation`. If the actual instance is not `TemplateProgrammingExerciseParticipation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TemplateProgrammingExerciseParticipation`
     * @throws ClassCastException if the instance is not `TemplateProgrammingExerciseParticipation`
     */
    public TemplateProgrammingExerciseParticipation getTemplateProgrammingExerciseParticipation() throws ClassCastException {
        return (TemplateProgrammingExerciseParticipation)super.getActualInstance();
    }

}

