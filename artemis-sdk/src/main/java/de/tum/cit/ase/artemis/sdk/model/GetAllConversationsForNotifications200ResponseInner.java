/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.Channel;
import de.tum.cit.ase.artemis.sdk.model.ConversationParticipant;
import de.tum.cit.ase.artemis.sdk.model.GroupChat;
import de.tum.cit.ase.artemis.sdk.model.OneToOneChat;
import de.tum.cit.ase.artemis.sdk.model.Post;
import de.tum.cit.ase.artemis.sdk.model.User;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import de.tum.cit.ase.artemis.sdk.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-10T14:33:20.156837Z[Etc/UTC]")
@JsonDeserialize(using = GetAllConversationsForNotifications200ResponseInner.GetAllConversationsForNotifications200ResponseInnerDeserializer.class)
@JsonSerialize(using = GetAllConversationsForNotifications200ResponseInner.GetAllConversationsForNotifications200ResponseInnerSerializer.class)
public class GetAllConversationsForNotifications200ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetAllConversationsForNotifications200ResponseInner.class.getName());

    public static class GetAllConversationsForNotifications200ResponseInnerSerializer extends StdSerializer<GetAllConversationsForNotifications200ResponseInner> {
        public GetAllConversationsForNotifications200ResponseInnerSerializer(Class<GetAllConversationsForNotifications200ResponseInner> t) {
            super(t);
        }

        public GetAllConversationsForNotifications200ResponseInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(GetAllConversationsForNotifications200ResponseInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class GetAllConversationsForNotifications200ResponseInnerDeserializer extends StdDeserializer<GetAllConversationsForNotifications200ResponseInner> {
        public GetAllConversationsForNotifications200ResponseInnerDeserializer() {
            this(GetAllConversationsForNotifications200ResponseInner.class);
        }

        public GetAllConversationsForNotifications200ResponseInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public GetAllConversationsForNotifications200ResponseInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize Channel
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (Channel.class.equals(Integer.class) || Channel.class.equals(Long.class) || Channel.class.equals(Float.class) || Channel.class.equals(Double.class) || Channel.class.equals(Boolean.class) || Channel.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((Channel.class.equals(Integer.class) || Channel.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((Channel.class.equals(Float.class) || Channel.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (Channel.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (Channel.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(Channel.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'Channel'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'Channel'", e);
            }

            // deserialize GroupChat
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (GroupChat.class.equals(Integer.class) || GroupChat.class.equals(Long.class) || GroupChat.class.equals(Float.class) || GroupChat.class.equals(Double.class) || GroupChat.class.equals(Boolean.class) || GroupChat.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((GroupChat.class.equals(Integer.class) || GroupChat.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((GroupChat.class.equals(Float.class) || GroupChat.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (GroupChat.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (GroupChat.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GroupChat.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'GroupChat'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'GroupChat'", e);
            }

            // deserialize OneToOneChat
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (OneToOneChat.class.equals(Integer.class) || OneToOneChat.class.equals(Long.class) || OneToOneChat.class.equals(Float.class) || OneToOneChat.class.equals(Double.class) || OneToOneChat.class.equals(Boolean.class) || OneToOneChat.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((OneToOneChat.class.equals(Integer.class) || OneToOneChat.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((OneToOneChat.class.equals(Float.class) || OneToOneChat.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (OneToOneChat.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (OneToOneChat.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(OneToOneChat.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'OneToOneChat'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'OneToOneChat'", e);
            }

            if (match == 1) {
                GetAllConversationsForNotifications200ResponseInner ret = new GetAllConversationsForNotifications200ResponseInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for GetAllConversationsForNotifications200ResponseInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public GetAllConversationsForNotifications200ResponseInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "GetAllConversationsForNotifications200ResponseInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public GetAllConversationsForNotifications200ResponseInner() {
        super("oneOf", Boolean.FALSE);
    }

    public GetAllConversationsForNotifications200ResponseInner(Channel o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetAllConversationsForNotifications200ResponseInner(GroupChat o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetAllConversationsForNotifications200ResponseInner(OneToOneChat o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Channel", new GenericType<Channel>() {
        });
        schemas.put("GroupChat", new GenericType<GroupChat>() {
        });
        schemas.put("OneToOneChat", new GenericType<OneToOneChat>() {
        });
        JSON.registerDescendants(GetAllConversationsForNotifications200ResponseInner.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<>();
        mappings.put("Channel", Channel.class);
        mappings.put("GroupChat", GroupChat.class);
        mappings.put("OneToOneChat", OneToOneChat.class);
        mappings.put("getAllConversationsForNotifications_200_response_inner", GetAllConversationsForNotifications200ResponseInner.class);
        JSON.registerDiscriminator(GetAllConversationsForNotifications200ResponseInner.class, "type", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetAllConversationsForNotifications200ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Channel, GroupChat, OneToOneChat
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(Channel.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(GroupChat.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(OneToOneChat.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Channel, GroupChat, OneToOneChat");
    }

    /**
     * Get the actual instance, which can be the following:
     * Channel, GroupChat, OneToOneChat
     *
     * @return The actual instance (Channel, GroupChat, OneToOneChat)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Channel`. If the actual instance is not `Channel`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Channel`
     * @throws ClassCastException if the instance is not `Channel`
     */
    public Channel getChannel() throws ClassCastException {
        return (Channel)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GroupChat`. If the actual instance is not `GroupChat`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GroupChat`
     * @throws ClassCastException if the instance is not `GroupChat`
     */
    public GroupChat getGroupChat() throws ClassCastException {
        return (GroupChat)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OneToOneChat`. If the actual instance is not `OneToOneChat`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OneToOneChat`
     * @throws ClassCastException if the instance is not `OneToOneChat`
     */
    public OneToOneChat getOneToOneChat() throws ClassCastException {
        return (OneToOneChat)super.getActualInstance();
    }

}

