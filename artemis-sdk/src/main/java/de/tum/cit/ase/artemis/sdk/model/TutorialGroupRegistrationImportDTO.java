/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.StudentDTO;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * TutorialGroupRegistrationImportDTO
 */
@JsonPropertyOrder({
  TutorialGroupRegistrationImportDTO.JSON_PROPERTY_TITLE,
  TutorialGroupRegistrationImportDTO.JSON_PROPERTY_STUDENT,
  TutorialGroupRegistrationImportDTO.JSON_PROPERTY_IMPORT_SUCCESSFUL,
  TutorialGroupRegistrationImportDTO.JSON_PROPERTY_ERROR
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-10T14:33:20.156837Z[Etc/UTC]")
public class TutorialGroupRegistrationImportDTO {
  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_STUDENT = "student";
  private StudentDTO student;

  public static final String JSON_PROPERTY_IMPORT_SUCCESSFUL = "importSuccessful";
  private Boolean importSuccessful;

  /**
   * Gets or Sets error
   */
  public enum ErrorEnum {
    NO_TITLE("NO_TITLE"),
    
    NO_USER_FOUND("NO_USER_FOUND"),
    
    MULTIPLE_REGISTRATIONS("MULTIPLE_REGISTRATIONS");

    private String value;

    ErrorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ErrorEnum fromValue(String value) {
      for (ErrorEnum b : ErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ERROR = "error";
  private ErrorEnum error;

  public TutorialGroupRegistrationImportDTO() { 
  }

  public TutorialGroupRegistrationImportDTO title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
  }


  public TutorialGroupRegistrationImportDTO student(StudentDTO student) {
    this.student = student;
    return this;
  }

   /**
   * Get student
   * @return student
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STUDENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StudentDTO getStudent() {
    return student;
  }


  @JsonProperty(JSON_PROPERTY_STUDENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStudent(StudentDTO student) {
    this.student = student;
  }


  public TutorialGroupRegistrationImportDTO importSuccessful(Boolean importSuccessful) {
    this.importSuccessful = importSuccessful;
    return this;
  }

   /**
   * Get importSuccessful
   * @return importSuccessful
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMPORT_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getImportSuccessful() {
    return importSuccessful;
  }


  @JsonProperty(JSON_PROPERTY_IMPORT_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImportSuccessful(Boolean importSuccessful) {
    this.importSuccessful = importSuccessful;
  }


  public TutorialGroupRegistrationImportDTO error(ErrorEnum error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ErrorEnum getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(ErrorEnum error) {
    this.error = error;
  }


  /**
   * Return true if this TutorialGroupRegistrationImportDTO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TutorialGroupRegistrationImportDTO tutorialGroupRegistrationImportDTO = (TutorialGroupRegistrationImportDTO) o;
    return Objects.equals(this.title, tutorialGroupRegistrationImportDTO.title) &&
        Objects.equals(this.student, tutorialGroupRegistrationImportDTO.student) &&
        Objects.equals(this.importSuccessful, tutorialGroupRegistrationImportDTO.importSuccessful) &&
        Objects.equals(this.error, tutorialGroupRegistrationImportDTO.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, student, importSuccessful, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TutorialGroupRegistrationImportDTO {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    student: ").append(toIndentedString(student)).append("\n");
    sb.append("    importSuccessful: ").append(toIndentedString(importSuccessful)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

