/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.AnswerPost;
import de.tum.cit.ase.artemis.sdk.model.Post;
import de.tum.cit.ase.artemis.sdk.model.User;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * Reaction
 */
@JsonPropertyOrder({
  Reaction.JSON_PROPERTY_ID,
  Reaction.JSON_PROPERTY_USER,
  Reaction.JSON_PROPERTY_CREATION_DATE,
  Reaction.JSON_PROPERTY_EMOJI_ID,
  Reaction.JSON_PROPERTY_POST,
  Reaction.JSON_PROPERTY_ANSWER_POST
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-06T13:57:19.283407Z[Etc/UTC]")
public class Reaction {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_USER = "user";
  private User user;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_EMOJI_ID = "emojiId";
  private String emojiId;

  public static final String JSON_PROPERTY_POST = "post";
  private Post post;

  public static final String JSON_PROPERTY_ANSWER_POST = "answerPost";
  private AnswerPost answerPost;

  public Reaction() { 
  }

  public Reaction id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public Reaction user(User user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public User getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(User user) {
    this.user = user;
  }


  public Reaction creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public Reaction emojiId(String emojiId) {
    this.emojiId = emojiId;
    return this;
  }

   /**
   * Get emojiId
   * @return emojiId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMOJI_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmojiId() {
    return emojiId;
  }


  @JsonProperty(JSON_PROPERTY_EMOJI_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmojiId(String emojiId) {
    this.emojiId = emojiId;
  }


  public Reaction post(Post post) {
    this.post = post;
    return this;
  }

   /**
   * Get post
   * @return post
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Post getPost() {
    return post;
  }


  @JsonProperty(JSON_PROPERTY_POST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPost(Post post) {
    this.post = post;
  }


  public Reaction answerPost(AnswerPost answerPost) {
    this.answerPost = answerPost;
    return this;
  }

   /**
   * Get answerPost
   * @return answerPost
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANSWER_POST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AnswerPost getAnswerPost() {
    return answerPost;
  }


  @JsonProperty(JSON_PROPERTY_ANSWER_POST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnswerPost(AnswerPost answerPost) {
    this.answerPost = answerPost;
  }


  /**
   * Return true if this Reaction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reaction reaction = (Reaction) o;
    return Objects.equals(this.id, reaction.id) &&
        Objects.equals(this.user, reaction.user) &&
        Objects.equals(this.creationDate, reaction.creationDate) &&
        Objects.equals(this.emojiId, reaction.emojiId) &&
        Objects.equals(this.post, reaction.post) &&
        Objects.equals(this.answerPost, reaction.answerPost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, user, creationDate, emojiId, post, answerPost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    emojiId: ").append(toIndentedString(emojiId)).append("\n");
    sb.append("    post: ").append(toIndentedString(post)).append("\n");
    sb.append("    answerPost: ").append(toIndentedString(answerPost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

