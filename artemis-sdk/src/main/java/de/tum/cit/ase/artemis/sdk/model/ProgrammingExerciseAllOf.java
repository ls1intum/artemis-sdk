/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.AuxiliaryRepository;
import de.tum.cit.ase.artemis.sdk.model.ExerciseHint;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseTask;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseTestCase;
import de.tum.cit.ase.artemis.sdk.model.SolutionProgrammingExerciseParticipation;
import de.tum.cit.ase.artemis.sdk.model.StaticCodeAnalysisCategory;
import de.tum.cit.ase.artemis.sdk.model.SubmissionPolicy;
import de.tum.cit.ase.artemis.sdk.model.TemplateProgrammingExerciseParticipation;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * ProgrammingExerciseAllOf
 */
@JsonPropertyOrder({
  ProgrammingExerciseAllOf.JSON_PROPERTY_TEST_REPOSITORY_URL,
  ProgrammingExerciseAllOf.JSON_PROPERTY_AUXILIARY_REPOSITORIES,
  ProgrammingExerciseAllOf.JSON_PROPERTY_PUBLISH_BUILD_PLAN_URL,
  ProgrammingExerciseAllOf.JSON_PROPERTY_ALLOW_ONLINE_EDITOR,
  ProgrammingExerciseAllOf.JSON_PROPERTY_ALLOW_OFFLINE_IDE,
  ProgrammingExerciseAllOf.JSON_PROPERTY_STATIC_CODE_ANALYSIS_ENABLED,
  ProgrammingExerciseAllOf.JSON_PROPERTY_MAX_STATIC_CODE_ANALYSIS_PENALTY,
  ProgrammingExerciseAllOf.JSON_PROPERTY_PROGRAMMING_LANGUAGE,
  ProgrammingExerciseAllOf.JSON_PROPERTY_PACKAGE_NAME,
  ProgrammingExerciseAllOf.JSON_PROPERTY_SEQUENTIAL_TEST_RUNS,
  ProgrammingExerciseAllOf.JSON_PROPERTY_SHOW_TEST_NAMES_TO_STUDENTS,
  ProgrammingExerciseAllOf.JSON_PROPERTY_BUILD_AND_TEST_STUDENT_SUBMISSIONS_AFTER_DUE_DATE,
  ProgrammingExerciseAllOf.JSON_PROPERTY_TEST_CASES_CHANGED,
  ProgrammingExerciseAllOf.JSON_PROPERTY_PROJECT_KEY,
  ProgrammingExerciseAllOf.JSON_PROPERTY_BUILD_PLAN_ACCESS_SECRET,
  ProgrammingExerciseAllOf.JSON_PROPERTY_TEMPLATE_PARTICIPATION,
  ProgrammingExerciseAllOf.JSON_PROPERTY_SOLUTION_PARTICIPATION,
  ProgrammingExerciseAllOf.JSON_PROPERTY_TEST_CASES,
  ProgrammingExerciseAllOf.JSON_PROPERTY_TASKS,
  ProgrammingExerciseAllOf.JSON_PROPERTY_STATIC_CODE_ANALYSIS_CATEGORIES,
  ProgrammingExerciseAllOf.JSON_PROPERTY_SUBMISSION_POLICY,
  ProgrammingExerciseAllOf.JSON_PROPERTY_PROJECT_TYPE,
  ProgrammingExerciseAllOf.JSON_PROPERTY_EXERCISE_HINTS,
  ProgrammingExerciseAllOf.JSON_PROPERTY_TESTWISE_COVERAGE_ENABLED,
  ProgrammingExerciseAllOf.JSON_PROPERTY_BRANCH,
  ProgrammingExerciseAllOf.JSON_PROPERTY_RELEASE_TESTS_WITH_EXAMPLE_SOLUTION,
  ProgrammingExerciseAllOf.JSON_PROPERTY_IS_LOCAL_SIMULATION,
  ProgrammingExerciseAllOf.JSON_PROPERTY_CHECKOUT_SOLUTION_REPOSITORY
})
@JsonTypeName("ProgrammingExercise_allOf")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-06T13:57:19.283407Z[Etc/UTC]")
public class ProgrammingExerciseAllOf {
  public static final String JSON_PROPERTY_TEST_REPOSITORY_URL = "testRepositoryUrl";
  private String testRepositoryUrl;

  public static final String JSON_PROPERTY_AUXILIARY_REPOSITORIES = "auxiliaryRepositories";
  private List<AuxiliaryRepository> auxiliaryRepositories;

  public static final String JSON_PROPERTY_PUBLISH_BUILD_PLAN_URL = "publishBuildPlanUrl";
  private Boolean publishBuildPlanUrl;

  public static final String JSON_PROPERTY_ALLOW_ONLINE_EDITOR = "allowOnlineEditor";
  private Boolean allowOnlineEditor;

  public static final String JSON_PROPERTY_ALLOW_OFFLINE_IDE = "allowOfflineIde";
  private Boolean allowOfflineIde;

  public static final String JSON_PROPERTY_STATIC_CODE_ANALYSIS_ENABLED = "staticCodeAnalysisEnabled";
  private Boolean staticCodeAnalysisEnabled;

  public static final String JSON_PROPERTY_MAX_STATIC_CODE_ANALYSIS_PENALTY = "maxStaticCodeAnalysisPenalty";
  private Integer maxStaticCodeAnalysisPenalty;

  /**
   * Gets or Sets programmingLanguage
   */
  public enum ProgrammingLanguageEnum {
    JAVA("JAVA"),
    
    PYTHON("PYTHON"),
    
    C("C"),
    
    HASKELL("HASKELL"),
    
    KOTLIN("KOTLIN"),
    
    VHDL("VHDL"),
    
    ASSEMBLER("ASSEMBLER"),
    
    SWIFT("SWIFT"),
    
    OCAML("OCAML"),
    
    EMPTY("EMPTY");

    private String value;

    ProgrammingLanguageEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProgrammingLanguageEnum fromValue(String value) {
      for (ProgrammingLanguageEnum b : ProgrammingLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROGRAMMING_LANGUAGE = "programmingLanguage";
  private ProgrammingLanguageEnum programmingLanguage;

  public static final String JSON_PROPERTY_PACKAGE_NAME = "packageName";
  private String packageName;

  public static final String JSON_PROPERTY_SEQUENTIAL_TEST_RUNS = "sequentialTestRuns";
  private Boolean sequentialTestRuns;

  public static final String JSON_PROPERTY_SHOW_TEST_NAMES_TO_STUDENTS = "showTestNamesToStudents";
  private Boolean showTestNamesToStudents;

  public static final String JSON_PROPERTY_BUILD_AND_TEST_STUDENT_SUBMISSIONS_AFTER_DUE_DATE = "buildAndTestStudentSubmissionsAfterDueDate";
  private OffsetDateTime buildAndTestStudentSubmissionsAfterDueDate;

  public static final String JSON_PROPERTY_TEST_CASES_CHANGED = "testCasesChanged";
  private Boolean testCasesChanged;

  public static final String JSON_PROPERTY_PROJECT_KEY = "projectKey";
  private String projectKey;

  public static final String JSON_PROPERTY_BUILD_PLAN_ACCESS_SECRET = "buildPlanAccessSecret";
  private String buildPlanAccessSecret;

  public static final String JSON_PROPERTY_TEMPLATE_PARTICIPATION = "templateParticipation";
  private TemplateProgrammingExerciseParticipation templateParticipation;

  public static final String JSON_PROPERTY_SOLUTION_PARTICIPATION = "solutionParticipation";
  private SolutionProgrammingExerciseParticipation solutionParticipation;

  public static final String JSON_PROPERTY_TEST_CASES = "testCases";
  private Set<ProgrammingExerciseTestCase> testCases;

  public static final String JSON_PROPERTY_TASKS = "tasks";
  private List<ProgrammingExerciseTask> tasks;

  public static final String JSON_PROPERTY_STATIC_CODE_ANALYSIS_CATEGORIES = "staticCodeAnalysisCategories";
  private Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories;

  public static final String JSON_PROPERTY_SUBMISSION_POLICY = "submissionPolicy";
  private SubmissionPolicy submissionPolicy;

  /**
   * Gets or Sets projectType
   */
  public enum ProjectTypeEnum {
    MAVEN_MAVEN("MAVEN_MAVEN"),
    
    PLAIN_MAVEN("PLAIN_MAVEN"),
    
    PLAIN("PLAIN"),
    
    XCODE("XCODE"),
    
    FACT("FACT"),
    
    GCC("GCC"),
    
    PLAIN_GRADLE("PLAIN_GRADLE"),
    
    GRADLE_GRADLE("GRADLE_GRADLE");

    private String value;

    ProjectTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProjectTypeEnum fromValue(String value) {
      for (ProjectTypeEnum b : ProjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROJECT_TYPE = "projectType";
  private ProjectTypeEnum projectType;

  public static final String JSON_PROPERTY_EXERCISE_HINTS = "exerciseHints";
  private Set<ExerciseHint> exerciseHints;

  public static final String JSON_PROPERTY_TESTWISE_COVERAGE_ENABLED = "testwiseCoverageEnabled";
  private Boolean testwiseCoverageEnabled;

  public static final String JSON_PROPERTY_BRANCH = "branch";
  private String branch;

  public static final String JSON_PROPERTY_RELEASE_TESTS_WITH_EXAMPLE_SOLUTION = "releaseTestsWithExampleSolution";
  private Boolean releaseTestsWithExampleSolution;

  public static final String JSON_PROPERTY_IS_LOCAL_SIMULATION = "isLocalSimulation";
  private Boolean isLocalSimulation;

  public static final String JSON_PROPERTY_CHECKOUT_SOLUTION_REPOSITORY = "checkoutSolutionRepository";
  private Boolean checkoutSolutionRepository;

  public ProgrammingExerciseAllOf() { 
  }

  public ProgrammingExerciseAllOf testRepositoryUrl(String testRepositoryUrl) {
    this.testRepositoryUrl = testRepositoryUrl;
    return this;
  }

   /**
   * Get testRepositoryUrl
   * @return testRepositoryUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_REPOSITORY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTestRepositoryUrl() {
    return testRepositoryUrl;
  }


  @JsonProperty(JSON_PROPERTY_TEST_REPOSITORY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestRepositoryUrl(String testRepositoryUrl) {
    this.testRepositoryUrl = testRepositoryUrl;
  }


  public ProgrammingExerciseAllOf auxiliaryRepositories(List<AuxiliaryRepository> auxiliaryRepositories) {
    this.auxiliaryRepositories = auxiliaryRepositories;
    return this;
  }

  public ProgrammingExerciseAllOf addAuxiliaryRepositoriesItem(AuxiliaryRepository auxiliaryRepositoriesItem) {
    if (this.auxiliaryRepositories == null) {
      this.auxiliaryRepositories = new ArrayList<>();
    }
    this.auxiliaryRepositories.add(auxiliaryRepositoriesItem);
    return this;
  }

   /**
   * Get auxiliaryRepositories
   * @return auxiliaryRepositories
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUXILIARY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AuxiliaryRepository> getAuxiliaryRepositories() {
    return auxiliaryRepositories;
  }


  @JsonProperty(JSON_PROPERTY_AUXILIARY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuxiliaryRepositories(List<AuxiliaryRepository> auxiliaryRepositories) {
    this.auxiliaryRepositories = auxiliaryRepositories;
  }


  public ProgrammingExerciseAllOf publishBuildPlanUrl(Boolean publishBuildPlanUrl) {
    this.publishBuildPlanUrl = publishBuildPlanUrl;
    return this;
  }

   /**
   * Get publishBuildPlanUrl
   * @return publishBuildPlanUrl
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISH_BUILD_PLAN_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPublishBuildPlanUrl() {
    return publishBuildPlanUrl;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISH_BUILD_PLAN_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublishBuildPlanUrl(Boolean publishBuildPlanUrl) {
    this.publishBuildPlanUrl = publishBuildPlanUrl;
  }


  public ProgrammingExerciseAllOf allowOnlineEditor(Boolean allowOnlineEditor) {
    this.allowOnlineEditor = allowOnlineEditor;
    return this;
  }

   /**
   * Get allowOnlineEditor
   * @return allowOnlineEditor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_ONLINE_EDITOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowOnlineEditor() {
    return allowOnlineEditor;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_ONLINE_EDITOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowOnlineEditor(Boolean allowOnlineEditor) {
    this.allowOnlineEditor = allowOnlineEditor;
  }


  public ProgrammingExerciseAllOf allowOfflineIde(Boolean allowOfflineIde) {
    this.allowOfflineIde = allowOfflineIde;
    return this;
  }

   /**
   * Get allowOfflineIde
   * @return allowOfflineIde
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_OFFLINE_IDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowOfflineIde() {
    return allowOfflineIde;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_OFFLINE_IDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowOfflineIde(Boolean allowOfflineIde) {
    this.allowOfflineIde = allowOfflineIde;
  }


  public ProgrammingExerciseAllOf staticCodeAnalysisEnabled(Boolean staticCodeAnalysisEnabled) {
    this.staticCodeAnalysisEnabled = staticCodeAnalysisEnabled;
    return this;
  }

   /**
   * Get staticCodeAnalysisEnabled
   * @return staticCodeAnalysisEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATIC_CODE_ANALYSIS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStaticCodeAnalysisEnabled() {
    return staticCodeAnalysisEnabled;
  }


  @JsonProperty(JSON_PROPERTY_STATIC_CODE_ANALYSIS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStaticCodeAnalysisEnabled(Boolean staticCodeAnalysisEnabled) {
    this.staticCodeAnalysisEnabled = staticCodeAnalysisEnabled;
  }


  public ProgrammingExerciseAllOf maxStaticCodeAnalysisPenalty(Integer maxStaticCodeAnalysisPenalty) {
    this.maxStaticCodeAnalysisPenalty = maxStaticCodeAnalysisPenalty;
    return this;
  }

   /**
   * Get maxStaticCodeAnalysisPenalty
   * @return maxStaticCodeAnalysisPenalty
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_STATIC_CODE_ANALYSIS_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxStaticCodeAnalysisPenalty() {
    return maxStaticCodeAnalysisPenalty;
  }


  @JsonProperty(JSON_PROPERTY_MAX_STATIC_CODE_ANALYSIS_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxStaticCodeAnalysisPenalty(Integer maxStaticCodeAnalysisPenalty) {
    this.maxStaticCodeAnalysisPenalty = maxStaticCodeAnalysisPenalty;
  }


  public ProgrammingExerciseAllOf programmingLanguage(ProgrammingLanguageEnum programmingLanguage) {
    this.programmingLanguage = programmingLanguage;
    return this;
  }

   /**
   * Get programmingLanguage
   * @return programmingLanguage
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROGRAMMING_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProgrammingLanguageEnum getProgrammingLanguage() {
    return programmingLanguage;
  }


  @JsonProperty(JSON_PROPERTY_PROGRAMMING_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProgrammingLanguage(ProgrammingLanguageEnum programmingLanguage) {
    this.programmingLanguage = programmingLanguage;
  }


  public ProgrammingExerciseAllOf packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

   /**
   * Get packageName
   * @return packageName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PACKAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPackageName() {
    return packageName;
  }


  @JsonProperty(JSON_PROPERTY_PACKAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public ProgrammingExerciseAllOf sequentialTestRuns(Boolean sequentialTestRuns) {
    this.sequentialTestRuns = sequentialTestRuns;
    return this;
  }

   /**
   * Get sequentialTestRuns
   * @return sequentialTestRuns
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEQUENTIAL_TEST_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSequentialTestRuns() {
    return sequentialTestRuns;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENTIAL_TEST_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSequentialTestRuns(Boolean sequentialTestRuns) {
    this.sequentialTestRuns = sequentialTestRuns;
  }


  public ProgrammingExerciseAllOf showTestNamesToStudents(Boolean showTestNamesToStudents) {
    this.showTestNamesToStudents = showTestNamesToStudents;
    return this;
  }

   /**
   * Get showTestNamesToStudents
   * @return showTestNamesToStudents
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHOW_TEST_NAMES_TO_STUDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShowTestNamesToStudents() {
    return showTestNamesToStudents;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_TEST_NAMES_TO_STUDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShowTestNamesToStudents(Boolean showTestNamesToStudents) {
    this.showTestNamesToStudents = showTestNamesToStudents;
  }


  public ProgrammingExerciseAllOf buildAndTestStudentSubmissionsAfterDueDate(OffsetDateTime buildAndTestStudentSubmissionsAfterDueDate) {
    this.buildAndTestStudentSubmissionsAfterDueDate = buildAndTestStudentSubmissionsAfterDueDate;
    return this;
  }

   /**
   * Get buildAndTestStudentSubmissionsAfterDueDate
   * @return buildAndTestStudentSubmissionsAfterDueDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILD_AND_TEST_STUDENT_SUBMISSIONS_AFTER_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getBuildAndTestStudentSubmissionsAfterDueDate() {
    return buildAndTestStudentSubmissionsAfterDueDate;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_AND_TEST_STUDENT_SUBMISSIONS_AFTER_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildAndTestStudentSubmissionsAfterDueDate(OffsetDateTime buildAndTestStudentSubmissionsAfterDueDate) {
    this.buildAndTestStudentSubmissionsAfterDueDate = buildAndTestStudentSubmissionsAfterDueDate;
  }


  public ProgrammingExerciseAllOf testCasesChanged(Boolean testCasesChanged) {
    this.testCasesChanged = testCasesChanged;
    return this;
  }

   /**
   * Get testCasesChanged
   * @return testCasesChanged
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_CASES_CHANGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTestCasesChanged() {
    return testCasesChanged;
  }


  @JsonProperty(JSON_PROPERTY_TEST_CASES_CHANGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestCasesChanged(Boolean testCasesChanged) {
    this.testCasesChanged = testCasesChanged;
  }


  public ProgrammingExerciseAllOf projectKey(String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

   /**
   * Get projectKey
   * @return projectKey
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProjectKey() {
    return projectKey;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public ProgrammingExerciseAllOf buildPlanAccessSecret(String buildPlanAccessSecret) {
    this.buildPlanAccessSecret = buildPlanAccessSecret;
    return this;
  }

   /**
   * Get buildPlanAccessSecret
   * @return buildPlanAccessSecret
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILD_PLAN_ACCESS_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildPlanAccessSecret() {
    return buildPlanAccessSecret;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_PLAN_ACCESS_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildPlanAccessSecret(String buildPlanAccessSecret) {
    this.buildPlanAccessSecret = buildPlanAccessSecret;
  }


  public ProgrammingExerciseAllOf templateParticipation(TemplateProgrammingExerciseParticipation templateParticipation) {
    this.templateParticipation = templateParticipation;
    return this;
  }

   /**
   * Get templateParticipation
   * @return templateParticipation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE_PARTICIPATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TemplateProgrammingExerciseParticipation getTemplateParticipation() {
    return templateParticipation;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_PARTICIPATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplateParticipation(TemplateProgrammingExerciseParticipation templateParticipation) {
    this.templateParticipation = templateParticipation;
  }


  public ProgrammingExerciseAllOf solutionParticipation(SolutionProgrammingExerciseParticipation solutionParticipation) {
    this.solutionParticipation = solutionParticipation;
    return this;
  }

   /**
   * Get solutionParticipation
   * @return solutionParticipation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOLUTION_PARTICIPATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SolutionProgrammingExerciseParticipation getSolutionParticipation() {
    return solutionParticipation;
  }


  @JsonProperty(JSON_PROPERTY_SOLUTION_PARTICIPATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSolutionParticipation(SolutionProgrammingExerciseParticipation solutionParticipation) {
    this.solutionParticipation = solutionParticipation;
  }


  public ProgrammingExerciseAllOf testCases(Set<ProgrammingExerciseTestCase> testCases) {
    this.testCases = testCases;
    return this;
  }

  public ProgrammingExerciseAllOf addTestCasesItem(ProgrammingExerciseTestCase testCasesItem) {
    if (this.testCases == null) {
      this.testCases = new LinkedHashSet<>();
    }
    this.testCases.add(testCasesItem);
    return this;
  }

   /**
   * Get testCases
   * @return testCases
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_CASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ProgrammingExerciseTestCase> getTestCases() {
    return testCases;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TEST_CASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestCases(Set<ProgrammingExerciseTestCase> testCases) {
    this.testCases = testCases;
  }


  public ProgrammingExerciseAllOf tasks(List<ProgrammingExerciseTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public ProgrammingExerciseAllOf addTasksItem(ProgrammingExerciseTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ProgrammingExerciseTask> getTasks() {
    return tasks;
  }


  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTasks(List<ProgrammingExerciseTask> tasks) {
    this.tasks = tasks;
  }


  public ProgrammingExerciseAllOf staticCodeAnalysisCategories(Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories) {
    this.staticCodeAnalysisCategories = staticCodeAnalysisCategories;
    return this;
  }

  public ProgrammingExerciseAllOf addStaticCodeAnalysisCategoriesItem(StaticCodeAnalysisCategory staticCodeAnalysisCategoriesItem) {
    if (this.staticCodeAnalysisCategories == null) {
      this.staticCodeAnalysisCategories = new LinkedHashSet<>();
    }
    this.staticCodeAnalysisCategories.add(staticCodeAnalysisCategoriesItem);
    return this;
  }

   /**
   * Get staticCodeAnalysisCategories
   * @return staticCodeAnalysisCategories
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATIC_CODE_ANALYSIS_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<StaticCodeAnalysisCategory> getStaticCodeAnalysisCategories() {
    return staticCodeAnalysisCategories;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_STATIC_CODE_ANALYSIS_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStaticCodeAnalysisCategories(Set<StaticCodeAnalysisCategory> staticCodeAnalysisCategories) {
    this.staticCodeAnalysisCategories = staticCodeAnalysisCategories;
  }


  public ProgrammingExerciseAllOf submissionPolicy(SubmissionPolicy submissionPolicy) {
    this.submissionPolicy = submissionPolicy;
    return this;
  }

   /**
   * Get submissionPolicy
   * @return submissionPolicy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMISSION_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SubmissionPolicy getSubmissionPolicy() {
    return submissionPolicy;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSION_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmissionPolicy(SubmissionPolicy submissionPolicy) {
    this.submissionPolicy = submissionPolicy;
  }


  public ProgrammingExerciseAllOf projectType(ProjectTypeEnum projectType) {
    this.projectType = projectType;
    return this;
  }

   /**
   * Get projectType
   * @return projectType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProjectTypeEnum getProjectType() {
    return projectType;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectType(ProjectTypeEnum projectType) {
    this.projectType = projectType;
  }


  public ProgrammingExerciseAllOf exerciseHints(Set<ExerciseHint> exerciseHints) {
    this.exerciseHints = exerciseHints;
    return this;
  }

  public ProgrammingExerciseAllOf addExerciseHintsItem(ExerciseHint exerciseHintsItem) {
    if (this.exerciseHints == null) {
      this.exerciseHints = new LinkedHashSet<>();
    }
    this.exerciseHints.add(exerciseHintsItem);
    return this;
  }

   /**
   * Get exerciseHints
   * @return exerciseHints
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXERCISE_HINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ExerciseHint> getExerciseHints() {
    return exerciseHints;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_EXERCISE_HINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExerciseHints(Set<ExerciseHint> exerciseHints) {
    this.exerciseHints = exerciseHints;
  }


  public ProgrammingExerciseAllOf testwiseCoverageEnabled(Boolean testwiseCoverageEnabled) {
    this.testwiseCoverageEnabled = testwiseCoverageEnabled;
    return this;
  }

   /**
   * Get testwiseCoverageEnabled
   * @return testwiseCoverageEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TESTWISE_COVERAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTestwiseCoverageEnabled() {
    return testwiseCoverageEnabled;
  }


  @JsonProperty(JSON_PROPERTY_TESTWISE_COVERAGE_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestwiseCoverageEnabled(Boolean testwiseCoverageEnabled) {
    this.testwiseCoverageEnabled = testwiseCoverageEnabled;
  }


  public ProgrammingExerciseAllOf branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBranch() {
    return branch;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranch(String branch) {
    this.branch = branch;
  }


  public ProgrammingExerciseAllOf releaseTestsWithExampleSolution(Boolean releaseTestsWithExampleSolution) {
    this.releaseTestsWithExampleSolution = releaseTestsWithExampleSolution;
    return this;
  }

   /**
   * Get releaseTestsWithExampleSolution
   * @return releaseTestsWithExampleSolution
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELEASE_TESTS_WITH_EXAMPLE_SOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getReleaseTestsWithExampleSolution() {
    return releaseTestsWithExampleSolution;
  }


  @JsonProperty(JSON_PROPERTY_RELEASE_TESTS_WITH_EXAMPLE_SOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReleaseTestsWithExampleSolution(Boolean releaseTestsWithExampleSolution) {
    this.releaseTestsWithExampleSolution = releaseTestsWithExampleSolution;
  }


  public ProgrammingExerciseAllOf isLocalSimulation(Boolean isLocalSimulation) {
    this.isLocalSimulation = isLocalSimulation;
    return this;
  }

   /**
   * Get isLocalSimulation
   * @return isLocalSimulation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_LOCAL_SIMULATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsLocalSimulation() {
    return isLocalSimulation;
  }


  @JsonProperty(JSON_PROPERTY_IS_LOCAL_SIMULATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsLocalSimulation(Boolean isLocalSimulation) {
    this.isLocalSimulation = isLocalSimulation;
  }


  public ProgrammingExerciseAllOf checkoutSolutionRepository(Boolean checkoutSolutionRepository) {
    this.checkoutSolutionRepository = checkoutSolutionRepository;
    return this;
  }

   /**
   * Get checkoutSolutionRepository
   * @return checkoutSolutionRepository
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHECKOUT_SOLUTION_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCheckoutSolutionRepository() {
    return checkoutSolutionRepository;
  }


  @JsonProperty(JSON_PROPERTY_CHECKOUT_SOLUTION_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCheckoutSolutionRepository(Boolean checkoutSolutionRepository) {
    this.checkoutSolutionRepository = checkoutSolutionRepository;
  }


  /**
   * Return true if this ProgrammingExercise_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseAllOf programmingExerciseAllOf = (ProgrammingExerciseAllOf) o;
    return Objects.equals(this.testRepositoryUrl, programmingExerciseAllOf.testRepositoryUrl) &&
        Objects.equals(this.auxiliaryRepositories, programmingExerciseAllOf.auxiliaryRepositories) &&
        Objects.equals(this.publishBuildPlanUrl, programmingExerciseAllOf.publishBuildPlanUrl) &&
        Objects.equals(this.allowOnlineEditor, programmingExerciseAllOf.allowOnlineEditor) &&
        Objects.equals(this.allowOfflineIde, programmingExerciseAllOf.allowOfflineIde) &&
        Objects.equals(this.staticCodeAnalysisEnabled, programmingExerciseAllOf.staticCodeAnalysisEnabled) &&
        Objects.equals(this.maxStaticCodeAnalysisPenalty, programmingExerciseAllOf.maxStaticCodeAnalysisPenalty) &&
        Objects.equals(this.programmingLanguage, programmingExerciseAllOf.programmingLanguage) &&
        Objects.equals(this.packageName, programmingExerciseAllOf.packageName) &&
        Objects.equals(this.sequentialTestRuns, programmingExerciseAllOf.sequentialTestRuns) &&
        Objects.equals(this.showTestNamesToStudents, programmingExerciseAllOf.showTestNamesToStudents) &&
        Objects.equals(this.buildAndTestStudentSubmissionsAfterDueDate, programmingExerciseAllOf.buildAndTestStudentSubmissionsAfterDueDate) &&
        Objects.equals(this.testCasesChanged, programmingExerciseAllOf.testCasesChanged) &&
        Objects.equals(this.projectKey, programmingExerciseAllOf.projectKey) &&
        Objects.equals(this.buildPlanAccessSecret, programmingExerciseAllOf.buildPlanAccessSecret) &&
        Objects.equals(this.templateParticipation, programmingExerciseAllOf.templateParticipation) &&
        Objects.equals(this.solutionParticipation, programmingExerciseAllOf.solutionParticipation) &&
        Objects.equals(this.testCases, programmingExerciseAllOf.testCases) &&
        Objects.equals(this.tasks, programmingExerciseAllOf.tasks) &&
        Objects.equals(this.staticCodeAnalysisCategories, programmingExerciseAllOf.staticCodeAnalysisCategories) &&
        Objects.equals(this.submissionPolicy, programmingExerciseAllOf.submissionPolicy) &&
        Objects.equals(this.projectType, programmingExerciseAllOf.projectType) &&
        Objects.equals(this.exerciseHints, programmingExerciseAllOf.exerciseHints) &&
        Objects.equals(this.testwiseCoverageEnabled, programmingExerciseAllOf.testwiseCoverageEnabled) &&
        Objects.equals(this.branch, programmingExerciseAllOf.branch) &&
        Objects.equals(this.releaseTestsWithExampleSolution, programmingExerciseAllOf.releaseTestsWithExampleSolution) &&
        Objects.equals(this.isLocalSimulation, programmingExerciseAllOf.isLocalSimulation) &&
        Objects.equals(this.checkoutSolutionRepository, programmingExerciseAllOf.checkoutSolutionRepository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testRepositoryUrl, auxiliaryRepositories, publishBuildPlanUrl, allowOnlineEditor, allowOfflineIde, staticCodeAnalysisEnabled, maxStaticCodeAnalysisPenalty, programmingLanguage, packageName, sequentialTestRuns, showTestNamesToStudents, buildAndTestStudentSubmissionsAfterDueDate, testCasesChanged, projectKey, buildPlanAccessSecret, templateParticipation, solutionParticipation, testCases, tasks, staticCodeAnalysisCategories, submissionPolicy, projectType, exerciseHints, testwiseCoverageEnabled, branch, releaseTestsWithExampleSolution, isLocalSimulation, checkoutSolutionRepository);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseAllOf {\n");
    sb.append("    testRepositoryUrl: ").append(toIndentedString(testRepositoryUrl)).append("\n");
    sb.append("    auxiliaryRepositories: ").append(toIndentedString(auxiliaryRepositories)).append("\n");
    sb.append("    publishBuildPlanUrl: ").append(toIndentedString(publishBuildPlanUrl)).append("\n");
    sb.append("    allowOnlineEditor: ").append(toIndentedString(allowOnlineEditor)).append("\n");
    sb.append("    allowOfflineIde: ").append(toIndentedString(allowOfflineIde)).append("\n");
    sb.append("    staticCodeAnalysisEnabled: ").append(toIndentedString(staticCodeAnalysisEnabled)).append("\n");
    sb.append("    maxStaticCodeAnalysisPenalty: ").append(toIndentedString(maxStaticCodeAnalysisPenalty)).append("\n");
    sb.append("    programmingLanguage: ").append(toIndentedString(programmingLanguage)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    sequentialTestRuns: ").append(toIndentedString(sequentialTestRuns)).append("\n");
    sb.append("    showTestNamesToStudents: ").append(toIndentedString(showTestNamesToStudents)).append("\n");
    sb.append("    buildAndTestStudentSubmissionsAfterDueDate: ").append(toIndentedString(buildAndTestStudentSubmissionsAfterDueDate)).append("\n");
    sb.append("    testCasesChanged: ").append(toIndentedString(testCasesChanged)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    buildPlanAccessSecret: ").append(toIndentedString(buildPlanAccessSecret)).append("\n");
    sb.append("    templateParticipation: ").append(toIndentedString(templateParticipation)).append("\n");
    sb.append("    solutionParticipation: ").append(toIndentedString(solutionParticipation)).append("\n");
    sb.append("    testCases: ").append(toIndentedString(testCases)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    staticCodeAnalysisCategories: ").append(toIndentedString(staticCodeAnalysisCategories)).append("\n");
    sb.append("    submissionPolicy: ").append(toIndentedString(submissionPolicy)).append("\n");
    sb.append("    projectType: ").append(toIndentedString(projectType)).append("\n");
    sb.append("    exerciseHints: ").append(toIndentedString(exerciseHints)).append("\n");
    sb.append("    testwiseCoverageEnabled: ").append(toIndentedString(testwiseCoverageEnabled)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    releaseTestsWithExampleSolution: ").append(toIndentedString(releaseTestsWithExampleSolution)).append("\n");
    sb.append("    isLocalSimulation: ").append(toIndentedString(isLocalSimulation)).append("\n");
    sb.append("    checkoutSolutionRepository: ").append(toIndentedString(checkoutSolutionRepository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

