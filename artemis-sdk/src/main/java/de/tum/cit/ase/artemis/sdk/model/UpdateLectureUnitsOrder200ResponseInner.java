/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.Attachment;
import de.tum.cit.ase.artemis.sdk.model.AttachmentUnit;
import de.tum.cit.ase.artemis.sdk.model.Exercise;
import de.tum.cit.ase.artemis.sdk.model.ExerciseUnit;
import de.tum.cit.ase.artemis.sdk.model.LearningGoal;
import de.tum.cit.ase.artemis.sdk.model.Lecture;
import de.tum.cit.ase.artemis.sdk.model.OnlineUnit;
import de.tum.cit.ase.artemis.sdk.model.TextUnit;
import de.tum.cit.ase.artemis.sdk.model.VideoUnit;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import de.tum.cit.ase.artemis.sdk.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-06T13:57:19.283407Z[Etc/UTC]")
@JsonDeserialize(using = UpdateLectureUnitsOrder200ResponseInner.UpdateLectureUnitsOrder200ResponseInnerDeserializer.class)
@JsonSerialize(using = UpdateLectureUnitsOrder200ResponseInner.UpdateLectureUnitsOrder200ResponseInnerSerializer.class)
public class UpdateLectureUnitsOrder200ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateLectureUnitsOrder200ResponseInner.class.getName());

    public static class UpdateLectureUnitsOrder200ResponseInnerSerializer extends StdSerializer<UpdateLectureUnitsOrder200ResponseInner> {
        public UpdateLectureUnitsOrder200ResponseInnerSerializer(Class<UpdateLectureUnitsOrder200ResponseInner> t) {
            super(t);
        }

        public UpdateLectureUnitsOrder200ResponseInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(UpdateLectureUnitsOrder200ResponseInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class UpdateLectureUnitsOrder200ResponseInnerDeserializer extends StdDeserializer<UpdateLectureUnitsOrder200ResponseInner> {
        public UpdateLectureUnitsOrder200ResponseInnerDeserializer() {
            this(UpdateLectureUnitsOrder200ResponseInner.class);
        }

        public UpdateLectureUnitsOrder200ResponseInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public UpdateLectureUnitsOrder200ResponseInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize AttachmentUnit
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (AttachmentUnit.class.equals(Integer.class) || AttachmentUnit.class.equals(Long.class) || AttachmentUnit.class.equals(Float.class) || AttachmentUnit.class.equals(Double.class) || AttachmentUnit.class.equals(Boolean.class) || AttachmentUnit.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((AttachmentUnit.class.equals(Integer.class) || AttachmentUnit.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((AttachmentUnit.class.equals(Float.class) || AttachmentUnit.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (AttachmentUnit.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (AttachmentUnit.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AttachmentUnit.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AttachmentUnit'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AttachmentUnit'", e);
            }

            // deserialize ExerciseUnit
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ExerciseUnit.class.equals(Integer.class) || ExerciseUnit.class.equals(Long.class) || ExerciseUnit.class.equals(Float.class) || ExerciseUnit.class.equals(Double.class) || ExerciseUnit.class.equals(Boolean.class) || ExerciseUnit.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ExerciseUnit.class.equals(Integer.class) || ExerciseUnit.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ExerciseUnit.class.equals(Float.class) || ExerciseUnit.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ExerciseUnit.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ExerciseUnit.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ExerciseUnit.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ExerciseUnit'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ExerciseUnit'", e);
            }

            // deserialize OnlineUnit
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (OnlineUnit.class.equals(Integer.class) || OnlineUnit.class.equals(Long.class) || OnlineUnit.class.equals(Float.class) || OnlineUnit.class.equals(Double.class) || OnlineUnit.class.equals(Boolean.class) || OnlineUnit.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((OnlineUnit.class.equals(Integer.class) || OnlineUnit.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((OnlineUnit.class.equals(Float.class) || OnlineUnit.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (OnlineUnit.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (OnlineUnit.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(OnlineUnit.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'OnlineUnit'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'OnlineUnit'", e);
            }

            // deserialize TextUnit
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (TextUnit.class.equals(Integer.class) || TextUnit.class.equals(Long.class) || TextUnit.class.equals(Float.class) || TextUnit.class.equals(Double.class) || TextUnit.class.equals(Boolean.class) || TextUnit.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((TextUnit.class.equals(Integer.class) || TextUnit.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((TextUnit.class.equals(Float.class) || TextUnit.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (TextUnit.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (TextUnit.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TextUnit.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'TextUnit'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'TextUnit'", e);
            }

            // deserialize VideoUnit
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (VideoUnit.class.equals(Integer.class) || VideoUnit.class.equals(Long.class) || VideoUnit.class.equals(Float.class) || VideoUnit.class.equals(Double.class) || VideoUnit.class.equals(Boolean.class) || VideoUnit.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((VideoUnit.class.equals(Integer.class) || VideoUnit.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((VideoUnit.class.equals(Float.class) || VideoUnit.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (VideoUnit.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (VideoUnit.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(VideoUnit.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'VideoUnit'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'VideoUnit'", e);
            }

            if (match == 1) {
                UpdateLectureUnitsOrder200ResponseInner ret = new UpdateLectureUnitsOrder200ResponseInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for UpdateLectureUnitsOrder200ResponseInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public UpdateLectureUnitsOrder200ResponseInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "UpdateLectureUnitsOrder200ResponseInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public UpdateLectureUnitsOrder200ResponseInner() {
        super("oneOf", Boolean.FALSE);
    }

    public UpdateLectureUnitsOrder200ResponseInner(AttachmentUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(ExerciseUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(OnlineUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(TextUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdateLectureUnitsOrder200ResponseInner(VideoUnit o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AttachmentUnit", new GenericType<AttachmentUnit>() {
        });
        schemas.put("ExerciseUnit", new GenericType<ExerciseUnit>() {
        });
        schemas.put("OnlineUnit", new GenericType<OnlineUnit>() {
        });
        schemas.put("TextUnit", new GenericType<TextUnit>() {
        });
        schemas.put("VideoUnit", new GenericType<VideoUnit>() {
        });
        JSON.registerDescendants(UpdateLectureUnitsOrder200ResponseInner.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<>();
        mappings.put("AttachmentUnit", AttachmentUnit.class);
        mappings.put("ExerciseUnit", ExerciseUnit.class);
        mappings.put("OnlineUnit", OnlineUnit.class);
        mappings.put("TextUnit", TextUnit.class);
        mappings.put("VideoUnit", VideoUnit.class);
        mappings.put("updateLectureUnitsOrder_200_response_inner", UpdateLectureUnitsOrder200ResponseInner.class);
        JSON.registerDiscriminator(UpdateLectureUnitsOrder200ResponseInner.class, "type", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return UpdateLectureUnitsOrder200ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(AttachmentUnit.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ExerciseUnit.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(OnlineUnit.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TextUnit.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(VideoUnit.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit");
    }

    /**
     * Get the actual instance, which can be the following:
     * AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit
     *
     * @return The actual instance (AttachmentUnit, ExerciseUnit, OnlineUnit, TextUnit, VideoUnit)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AttachmentUnit`. If the actual instance is not `AttachmentUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AttachmentUnit`
     * @throws ClassCastException if the instance is not `AttachmentUnit`
     */
    public AttachmentUnit getAttachmentUnit() throws ClassCastException {
        return (AttachmentUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExerciseUnit`. If the actual instance is not `ExerciseUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExerciseUnit`
     * @throws ClassCastException if the instance is not `ExerciseUnit`
     */
    public ExerciseUnit getExerciseUnit() throws ClassCastException {
        return (ExerciseUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OnlineUnit`. If the actual instance is not `OnlineUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OnlineUnit`
     * @throws ClassCastException if the instance is not `OnlineUnit`
     */
    public OnlineUnit getOnlineUnit() throws ClassCastException {
        return (OnlineUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TextUnit`. If the actual instance is not `TextUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextUnit`
     * @throws ClassCastException if the instance is not `TextUnit`
     */
    public TextUnit getTextUnit() throws ClassCastException {
        return (TextUnit)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VideoUnit`. If the actual instance is not `VideoUnit`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VideoUnit`
     * @throws ClassCastException if the instance is not `VideoUnit`
     */
    public VideoUnit getVideoUnit() throws ClassCastException {
        return (VideoUnit)super.getActualInstance();
    }

}

