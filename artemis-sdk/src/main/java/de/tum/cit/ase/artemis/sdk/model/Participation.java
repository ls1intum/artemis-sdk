/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.Exercise;
import de.tum.cit.ase.artemis.sdk.model.GetAllTextSubmissions200ResponseInner;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseStudentParticipation;
import de.tum.cit.ase.artemis.sdk.model.Result;
import de.tum.cit.ase.artemis.sdk.model.SolutionProgrammingExerciseParticipation;
import de.tum.cit.ase.artemis.sdk.model.StudentParticipation;
import de.tum.cit.ase.artemis.sdk.model.TemplateProgrammingExerciseParticipation;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * Participation
 */
@JsonPropertyOrder({
  Participation.JSON_PROPERTY_ID,
  Participation.JSON_PROPERTY_INITIALIZATION_STATE,
  Participation.JSON_PROPERTY_INITIALIZATION_DATE,
  Participation.JSON_PROPERTY_INDIVIDUAL_DUE_DATE,
  Participation.JSON_PROPERTY_TEST_RUN,
  Participation.JSON_PROPERTY_EXERCISE,
  Participation.JSON_PROPERTY_RESULTS,
  Participation.JSON_PROPERTY_SUBMISSIONS,
  Participation.JSON_PROPERTY_SUBMISSION_COUNT,
  Participation.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-02T15:54:21.223567Z[Etc/UTC]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ProgrammingExerciseStudentParticipation.class, name = "ProgrammingExerciseStudentParticipation"),
  @JsonSubTypes.Type(value = SolutionProgrammingExerciseParticipation.class, name = "SolutionProgrammingExerciseParticipation"),
  @JsonSubTypes.Type(value = StudentParticipation.class, name = "StudentParticipation"),
  @JsonSubTypes.Type(value = TemplateProgrammingExerciseParticipation.class, name = "TemplateProgrammingExerciseParticipation"),
})

public class Participation {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  /**
   * Gets or Sets initializationState
   */
  public enum InitializationStateEnum {
    UNINITIALIZED("UNINITIALIZED"),
    
    REPO_COPIED("REPO_COPIED"),
    
    REPO_CONFIGURED("REPO_CONFIGURED"),
    
    INACTIVE("INACTIVE"),
    
    BUILD_PLAN_COPIED("BUILD_PLAN_COPIED"),
    
    BUILD_PLAN_CONFIGURED("BUILD_PLAN_CONFIGURED"),
    
    INITIALIZED("INITIALIZED"),
    
    FINISHED("FINISHED");

    private String value;

    InitializationStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InitializationStateEnum fromValue(String value) {
      for (InitializationStateEnum b : InitializationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INITIALIZATION_STATE = "initializationState";
  private InitializationStateEnum initializationState;

  public static final String JSON_PROPERTY_INITIALIZATION_DATE = "initializationDate";
  private OffsetDateTime initializationDate;

  public static final String JSON_PROPERTY_INDIVIDUAL_DUE_DATE = "individualDueDate";
  private OffsetDateTime individualDueDate;

  public static final String JSON_PROPERTY_TEST_RUN = "testRun";
  private Boolean testRun;

  public static final String JSON_PROPERTY_EXERCISE = "exercise";
  private Exercise exercise;

  public static final String JSON_PROPERTY_RESULTS = "results";
  private Set<Result> results = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_SUBMISSIONS = "submissions";
  private Set<GetAllTextSubmissions200ResponseInner> submissions = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_SUBMISSION_COUNT = "submissionCount";
  private Integer submissionCount;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public Participation() { 
  }

  public Participation id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public Participation initializationState(InitializationStateEnum initializationState) {
    this.initializationState = initializationState;
    return this;
  }

   /**
   * Get initializationState
   * @return initializationState
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIALIZATION_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InitializationStateEnum getInitializationState() {
    return initializationState;
  }


  @JsonProperty(JSON_PROPERTY_INITIALIZATION_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitializationState(InitializationStateEnum initializationState) {
    this.initializationState = initializationState;
  }


  public Participation initializationDate(OffsetDateTime initializationDate) {
    this.initializationDate = initializationDate;
    return this;
  }

   /**
   * Get initializationDate
   * @return initializationDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIALIZATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getInitializationDate() {
    return initializationDate;
  }


  @JsonProperty(JSON_PROPERTY_INITIALIZATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitializationDate(OffsetDateTime initializationDate) {
    this.initializationDate = initializationDate;
  }


  public Participation individualDueDate(OffsetDateTime individualDueDate) {
    this.individualDueDate = individualDueDate;
    return this;
  }

   /**
   * Get individualDueDate
   * @return individualDueDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDIVIDUAL_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getIndividualDueDate() {
    return individualDueDate;
  }


  @JsonProperty(JSON_PROPERTY_INDIVIDUAL_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndividualDueDate(OffsetDateTime individualDueDate) {
    this.individualDueDate = individualDueDate;
  }


  public Participation testRun(Boolean testRun) {
    this.testRun = testRun;
    return this;
  }

   /**
   * Get testRun
   * @return testRun
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_RUN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTestRun() {
    return testRun;
  }


  @JsonProperty(JSON_PROPERTY_TEST_RUN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestRun(Boolean testRun) {
    this.testRun = testRun;
  }


  public Participation exercise(Exercise exercise) {
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Exercise getExercise() {
    return exercise;
  }


  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExercise(Exercise exercise) {
    this.exercise = exercise;
  }


  public Participation results(Set<Result> results) {
    this.results = results;
    return this;
  }

  public Participation addResultsItem(Result resultsItem) {
    if (this.results == null) {
      this.results = new LinkedHashSet<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * Get results
   * @return results
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Result> getResults() {
    return results;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResults(Set<Result> results) {
    this.results = results;
  }


  public Participation submissions(Set<GetAllTextSubmissions200ResponseInner> submissions) {
    this.submissions = submissions;
    return this;
  }

  public Participation addSubmissionsItem(GetAllTextSubmissions200ResponseInner submissionsItem) {
    if (this.submissions == null) {
      this.submissions = new LinkedHashSet<>();
    }
    this.submissions.add(submissionsItem);
    return this;
  }

   /**
   * Get submissions
   * @return submissions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<GetAllTextSubmissions200ResponseInner> getSubmissions() {
    return submissions;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmissions(Set<GetAllTextSubmissions200ResponseInner> submissions) {
    this.submissions = submissions;
  }


  public Participation submissionCount(Integer submissionCount) {
    this.submissionCount = submissionCount;
    return this;
  }

   /**
   * Get submissionCount
   * @return submissionCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMISSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSubmissionCount() {
    return submissionCount;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmissionCount(Integer submissionCount) {
    this.submissionCount = submissionCount;
  }


  public Participation type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  /**
   * Return true if this Participation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Participation participation = (Participation) o;
    return Objects.equals(this.id, participation.id) &&
        Objects.equals(this.initializationState, participation.initializationState) &&
        Objects.equals(this.initializationDate, participation.initializationDate) &&
        Objects.equals(this.individualDueDate, participation.individualDueDate) &&
        Objects.equals(this.testRun, participation.testRun) &&
        Objects.equals(this.exercise, participation.exercise) &&
        Objects.equals(this.results, participation.results) &&
        Objects.equals(this.submissions, participation.submissions) &&
        Objects.equals(this.submissionCount, participation.submissionCount) &&
        Objects.equals(this.type, participation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, initializationState, initializationDate, individualDueDate, testRun, exercise, results, submissions, submissionCount, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Participation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initializationState: ").append(toIndentedString(initializationState)).append("\n");
    sb.append("    initializationDate: ").append(toIndentedString(initializationDate)).append("\n");
    sb.append("    individualDueDate: ").append(toIndentedString(individualDueDate)).append("\n");
    sb.append("    testRun: ").append(toIndentedString(testRun)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    submissions: ").append(toIndentedString(submissions)).append("\n");
    sb.append("    submissionCount: ").append(toIndentedString(submissionCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("ProgrammingExerciseStudentParticipation", ProgrammingExerciseStudentParticipation.class);
  mappings.put("SolutionProgrammingExerciseParticipation", SolutionProgrammingExerciseParticipation.class);
  mappings.put("StudentParticipation", StudentParticipation.class);
  mappings.put("TemplateProgrammingExerciseParticipation", TemplateProgrammingExerciseParticipation.class);
  mappings.put("Participation", Participation.class);
  JSON.registerDiscriminator(Participation.class, "type", mappings);
}
}

