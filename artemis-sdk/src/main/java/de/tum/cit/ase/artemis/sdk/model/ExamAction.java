/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * ExamAction
 */
@JsonPropertyOrder({
  ExamAction.JSON_PROPERTY_ID,
  ExamAction.JSON_PROPERTY_STUDENT_EXAM_ID,
  ExamAction.JSON_PROPERTY_EXAM_ACTIVITY_ID,
  ExamAction.JSON_PROPERTY_TIMESTAMP,
  ExamAction.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-10T14:33:20.156837Z[Etc/UTC]")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ConnectionUpdatedAction.class, name = "ConnectionUpdatedAction"),
  @JsonSubTypes.Type(value = ContinuedAfterHandedInEarlyAction.class, name = "ContinuedAfterHandedInEarlyAction"),
  @JsonSubTypes.Type(value = EndedExamAction.class, name = "EndedExamAction"),
  @JsonSubTypes.Type(value = HandedInEarlyAction.class, name = "HandedInEarlyAction"),
  @JsonSubTypes.Type(value = SavedExerciseAction.class, name = "SavedExerciseAction"),
  @JsonSubTypes.Type(value = StartedExamAction.class, name = "StartedExamAction"),
  @JsonSubTypes.Type(value = SwitchedExerciseAction.class, name = "SwitchedExerciseAction"),
})

public class ExamAction {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_STUDENT_EXAM_ID = "studentExamId";
  private Long studentExamId;

  public static final String JSON_PROPERTY_EXAM_ACTIVITY_ID = "examActivityId";
  private Long examActivityId;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private OffsetDateTime timestamp;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    STARTED_EXAM("STARTED_EXAM"),
    
    ENDED_EXAM("ENDED_EXAM"),
    
    HANDED_IN_EARLY("HANDED_IN_EARLY"),
    
    CONTINUED_AFTER_HAND_IN_EARLY("CONTINUED_AFTER_HAND_IN_EARLY"),
    
    SWITCHED_EXERCISE("SWITCHED_EXERCISE"),
    
    SAVED_EXERCISE("SAVED_EXERCISE"),
    
    CONNECTION_UPDATED("CONNECTION_UPDATED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public ExamAction() { 
  }

  public ExamAction id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ExamAction studentExamId(Long studentExamId) {
    this.studentExamId = studentExamId;
    return this;
  }

   /**
   * Get studentExamId
   * @return studentExamId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STUDENT_EXAM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getStudentExamId() {
    return studentExamId;
  }


  @JsonProperty(JSON_PROPERTY_STUDENT_EXAM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStudentExamId(Long studentExamId) {
    this.studentExamId = studentExamId;
  }


  public ExamAction examActivityId(Long examActivityId) {
    this.examActivityId = examActivityId;
    return this;
  }

   /**
   * Get examActivityId
   * @return examActivityId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXAM_ACTIVITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getExamActivityId() {
    return examActivityId;
  }


  @JsonProperty(JSON_PROPERTY_EXAM_ACTIVITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExamActivityId(Long examActivityId) {
    this.examActivityId = examActivityId;
  }


  public ExamAction timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ExamAction type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this ExamAction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamAction examAction = (ExamAction) o;
    return Objects.equals(this.id, examAction.id) &&
        Objects.equals(this.studentExamId, examAction.studentExamId) &&
        Objects.equals(this.examActivityId, examAction.examActivityId) &&
        Objects.equals(this.timestamp, examAction.timestamp) &&
        Objects.equals(this.type, examAction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, studentExamId, examActivityId, timestamp, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamAction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    studentExamId: ").append(toIndentedString(studentExamId)).append("\n");
    sb.append("    examActivityId: ").append(toIndentedString(examActivityId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  static {
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<>();
    mappings.put("ConnectionUpdatedAction", ConnectionUpdatedAction.class);
    mappings.put("ContinuedAfterHandedInEarlyAction", ContinuedAfterHandedInEarlyAction.class);
    mappings.put("EndedExamAction", EndedExamAction.class);
    mappings.put("HandedInEarlyAction", HandedInEarlyAction.class);
    mappings.put("SavedExerciseAction", SavedExerciseAction.class);
    mappings.put("StartedExamAction", StartedExamAction.class);
    mappings.put("SwitchedExerciseAction", SwitchedExerciseAction.class);
    mappings.put("ExamAction", ExamAction.class);
    JSON.registerDiscriminator(ExamAction.class, "type", mappings);
  }
}

