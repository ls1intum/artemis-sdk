/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.Exercise;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseSolutionEntry;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseTask;
import de.tum.cit.ase.artemis.sdk.model.TestwiseCoverageReportEntry;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * ProgrammingExerciseTestCase
 */
@JsonPropertyOrder({
  ProgrammingExerciseTestCase.JSON_PROPERTY_ID,
  ProgrammingExerciseTestCase.JSON_PROPERTY_TEST_NAME,
  ProgrammingExerciseTestCase.JSON_PROPERTY_WEIGHT,
  ProgrammingExerciseTestCase.JSON_PROPERTY_ACTIVE,
  ProgrammingExerciseTestCase.JSON_PROPERTY_VISIBILITY,
  ProgrammingExerciseTestCase.JSON_PROPERTY_BONUS_MULTIPLIER,
  ProgrammingExerciseTestCase.JSON_PROPERTY_BONUS_POINTS,
  ProgrammingExerciseTestCase.JSON_PROPERTY_TASKS,
  ProgrammingExerciseTestCase.JSON_PROPERTY_SOLUTION_ENTRIES,
  ProgrammingExerciseTestCase.JSON_PROPERTY_EXERCISE,
  ProgrammingExerciseTestCase.JSON_PROPERTY_TYPE,
  ProgrammingExerciseTestCase.JSON_PROPERTY_COVERAGE_ENTRIES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-06T13:57:19.283407Z[Etc/UTC]")
public class ProgrammingExerciseTestCase {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_TEST_NAME = "testName";
  private String testName;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Double weight;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  /**
   * Gets or Sets visibility
   */
  public enum VisibilityEnum {
    ALWAYS("ALWAYS"),
    
    AFTER_DUE_DATE("AFTER_DUE_DATE"),
    
    NEVER("NEVER");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  public static final String JSON_PROPERTY_BONUS_MULTIPLIER = "bonusMultiplier";
  private Double bonusMultiplier;

  public static final String JSON_PROPERTY_BONUS_POINTS = "bonusPoints";
  private Double bonusPoints;

  public static final String JSON_PROPERTY_TASKS = "tasks";
  private Set<ProgrammingExerciseTask> tasks;

  public static final String JSON_PROPERTY_SOLUTION_ENTRIES = "solutionEntries";
  private Set<ProgrammingExerciseSolutionEntry> solutionEntries;

  public static final String JSON_PROPERTY_EXERCISE = "exercise";
  private Exercise exercise;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    STRUCTURAL("STRUCTURAL"),
    
    BEHAVIORAL("BEHAVIORAL"),
    
    DEFAULT("DEFAULT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_COVERAGE_ENTRIES = "coverageEntries";
  private Set<TestwiseCoverageReportEntry> coverageEntries;

  public ProgrammingExerciseTestCase() { 
  }

  public ProgrammingExerciseTestCase id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ProgrammingExerciseTestCase testName(String testName) {
    this.testName = testName;
    return this;
  }

   /**
   * Get testName
   * @return testName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTestName() {
    return testName;
  }


  @JsonProperty(JSON_PROPERTY_TEST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestName(String testName) {
    this.testName = testName;
  }


  public ProgrammingExerciseTestCase weight(Double weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(Double weight) {
    this.weight = weight;
  }


  public ProgrammingExerciseTestCase active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public ProgrammingExerciseTestCase visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public ProgrammingExerciseTestCase bonusMultiplier(Double bonusMultiplier) {
    this.bonusMultiplier = bonusMultiplier;
    return this;
  }

   /**
   * Get bonusMultiplier
   * @return bonusMultiplier
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BONUS_MULTIPLIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getBonusMultiplier() {
    return bonusMultiplier;
  }


  @JsonProperty(JSON_PROPERTY_BONUS_MULTIPLIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBonusMultiplier(Double bonusMultiplier) {
    this.bonusMultiplier = bonusMultiplier;
  }


  public ProgrammingExerciseTestCase bonusPoints(Double bonusPoints) {
    this.bonusPoints = bonusPoints;
    return this;
  }

   /**
   * Get bonusPoints
   * @return bonusPoints
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BONUS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getBonusPoints() {
    return bonusPoints;
  }


  @JsonProperty(JSON_PROPERTY_BONUS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBonusPoints(Double bonusPoints) {
    this.bonusPoints = bonusPoints;
  }


  public ProgrammingExerciseTestCase tasks(Set<ProgrammingExerciseTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public ProgrammingExerciseTestCase addTasksItem(ProgrammingExerciseTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new LinkedHashSet<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ProgrammingExerciseTask> getTasks() {
    return tasks;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTasks(Set<ProgrammingExerciseTask> tasks) {
    this.tasks = tasks;
  }


  public ProgrammingExerciseTestCase solutionEntries(Set<ProgrammingExerciseSolutionEntry> solutionEntries) {
    this.solutionEntries = solutionEntries;
    return this;
  }

  public ProgrammingExerciseTestCase addSolutionEntriesItem(ProgrammingExerciseSolutionEntry solutionEntriesItem) {
    if (this.solutionEntries == null) {
      this.solutionEntries = new LinkedHashSet<>();
    }
    this.solutionEntries.add(solutionEntriesItem);
    return this;
  }

   /**
   * Get solutionEntries
   * @return solutionEntries
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOLUTION_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ProgrammingExerciseSolutionEntry> getSolutionEntries() {
    return solutionEntries;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SOLUTION_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSolutionEntries(Set<ProgrammingExerciseSolutionEntry> solutionEntries) {
    this.solutionEntries = solutionEntries;
  }


  public ProgrammingExerciseTestCase exercise(Exercise exercise) {
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Exercise getExercise() {
    return exercise;
  }


  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExercise(Exercise exercise) {
    this.exercise = exercise;
  }


  public ProgrammingExerciseTestCase type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ProgrammingExerciseTestCase coverageEntries(Set<TestwiseCoverageReportEntry> coverageEntries) {
    this.coverageEntries = coverageEntries;
    return this;
  }

  public ProgrammingExerciseTestCase addCoverageEntriesItem(TestwiseCoverageReportEntry coverageEntriesItem) {
    if (this.coverageEntries == null) {
      this.coverageEntries = new LinkedHashSet<>();
    }
    this.coverageEntries.add(coverageEntriesItem);
    return this;
  }

   /**
   * Get coverageEntries
   * @return coverageEntries
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COVERAGE_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<TestwiseCoverageReportEntry> getCoverageEntries() {
    return coverageEntries;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_COVERAGE_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCoverageEntries(Set<TestwiseCoverageReportEntry> coverageEntries) {
    this.coverageEntries = coverageEntries;
  }


  /**
   * Return true if this ProgrammingExerciseTestCase object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseTestCase programmingExerciseTestCase = (ProgrammingExerciseTestCase) o;
    return Objects.equals(this.id, programmingExerciseTestCase.id) &&
        Objects.equals(this.testName, programmingExerciseTestCase.testName) &&
        Objects.equals(this.weight, programmingExerciseTestCase.weight) &&
        Objects.equals(this.active, programmingExerciseTestCase.active) &&
        Objects.equals(this.visibility, programmingExerciseTestCase.visibility) &&
        Objects.equals(this.bonusMultiplier, programmingExerciseTestCase.bonusMultiplier) &&
        Objects.equals(this.bonusPoints, programmingExerciseTestCase.bonusPoints) &&
        Objects.equals(this.tasks, programmingExerciseTestCase.tasks) &&
        Objects.equals(this.solutionEntries, programmingExerciseTestCase.solutionEntries) &&
        Objects.equals(this.exercise, programmingExerciseTestCase.exercise) &&
        Objects.equals(this.type, programmingExerciseTestCase.type) &&
        Objects.equals(this.coverageEntries, programmingExerciseTestCase.coverageEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, testName, weight, active, visibility, bonusMultiplier, bonusPoints, tasks, solutionEntries, exercise, type, coverageEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseTestCase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    bonusMultiplier: ").append(toIndentedString(bonusMultiplier)).append("\n");
    sb.append("    bonusPoints: ").append(toIndentedString(bonusPoints)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    solutionEntries: ").append(toIndentedString(solutionEntries)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    coverageEntries: ").append(toIndentedString(coverageEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

