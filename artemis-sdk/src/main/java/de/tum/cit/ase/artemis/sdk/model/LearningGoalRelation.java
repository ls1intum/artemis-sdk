/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.LearningGoal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * LearningGoalRelation
 */
@JsonPropertyOrder({
  LearningGoalRelation.JSON_PROPERTY_ID,
  LearningGoalRelation.JSON_PROPERTY_TAIL_LEARNING_GOAL,
  LearningGoalRelation.JSON_PROPERTY_HEAD_LEARNING_GOAL,
  LearningGoalRelation.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-27T15:31:11.360443Z[Etc/UTC]")
public class LearningGoalRelation {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_TAIL_LEARNING_GOAL = "tailLearningGoal";
  private LearningGoal tailLearningGoal;

  public static final String JSON_PROPERTY_HEAD_LEARNING_GOAL = "headLearningGoal";
  private LearningGoal headLearningGoal;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    RELATES("RELATES"),
    
    ASSUMES("ASSUMES"),
    
    EXTENDS("EXTENDS"),
    
    MATCHES("MATCHES");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public LearningGoalRelation() { 
  }

  public LearningGoalRelation id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public LearningGoalRelation tailLearningGoal(LearningGoal tailLearningGoal) {
    this.tailLearningGoal = tailLearningGoal;
    return this;
  }

   /**
   * Get tailLearningGoal
   * @return tailLearningGoal
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAIL_LEARNING_GOAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LearningGoal getTailLearningGoal() {
    return tailLearningGoal;
  }


  @JsonProperty(JSON_PROPERTY_TAIL_LEARNING_GOAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTailLearningGoal(LearningGoal tailLearningGoal) {
    this.tailLearningGoal = tailLearningGoal;
  }


  public LearningGoalRelation headLearningGoal(LearningGoal headLearningGoal) {
    this.headLearningGoal = headLearningGoal;
    return this;
  }

   /**
   * Get headLearningGoal
   * @return headLearningGoal
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEAD_LEARNING_GOAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LearningGoal getHeadLearningGoal() {
    return headLearningGoal;
  }


  @JsonProperty(JSON_PROPERTY_HEAD_LEARNING_GOAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeadLearningGoal(LearningGoal headLearningGoal) {
    this.headLearningGoal = headLearningGoal;
  }


  public LearningGoalRelation type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Return true if this LearningGoalRelation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGoalRelation learningGoalRelation = (LearningGoalRelation) o;
    return Objects.equals(this.id, learningGoalRelation.id) &&
        Objects.equals(this.tailLearningGoal, learningGoalRelation.tailLearningGoal) &&
        Objects.equals(this.headLearningGoal, learningGoalRelation.headLearningGoal) &&
        Objects.equals(this.type, learningGoalRelation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tailLearningGoal, headLearningGoal, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGoalRelation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tailLearningGoal: ").append(toIndentedString(tailLearningGoal)).append("\n");
    sb.append("    headLearningGoal: ").append(toIndentedString(headLearningGoal)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

