/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * ExamExerciseStartPreparationStatus
 */
@JsonPropertyOrder({
  ExamExerciseStartPreparationStatus.JSON_PROPERTY_FINISHED,
  ExamExerciseStartPreparationStatus.JSON_PROPERTY_FAILED,
  ExamExerciseStartPreparationStatus.JSON_PROPERTY_OVERALL,
  ExamExerciseStartPreparationStatus.JSON_PROPERTY_PARTICIPATION_COUNT,
  ExamExerciseStartPreparationStatus.JSON_PROPERTY_STARTED_AT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-02T15:54:21.223567Z[Etc/UTC]")
public class ExamExerciseStartPreparationStatus {
  public static final String JSON_PROPERTY_FINISHED = "finished";
  private Integer finished;

  public static final String JSON_PROPERTY_FAILED = "failed";
  private Integer failed;

  public static final String JSON_PROPERTY_OVERALL = "overall";
  private Integer overall;

  public static final String JSON_PROPERTY_PARTICIPATION_COUNT = "participationCount";
  private Integer participationCount;

  public static final String JSON_PROPERTY_STARTED_AT = "startedAt";
  private OffsetDateTime startedAt;

  public ExamExerciseStartPreparationStatus() { 
  }

  public ExamExerciseStartPreparationStatus finished(Integer finished) {
    this.finished = finished;
    return this;
  }

   /**
   * Get finished
   * @return finished
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFinished() {
    return finished;
  }


  @JsonProperty(JSON_PROPERTY_FINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinished(Integer finished) {
    this.finished = finished;
  }


  public ExamExerciseStartPreparationStatus failed(Integer failed) {
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFailed() {
    return failed;
  }


  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public ExamExerciseStartPreparationStatus overall(Integer overall) {
    this.overall = overall;
    return this;
  }

   /**
   * Get overall
   * @return overall
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOverall() {
    return overall;
  }


  @JsonProperty(JSON_PROPERTY_OVERALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverall(Integer overall) {
    this.overall = overall;
  }


  public ExamExerciseStartPreparationStatus participationCount(Integer participationCount) {
    this.participationCount = participationCount;
    return this;
  }

   /**
   * Get participationCount
   * @return participationCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTICIPATION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getParticipationCount() {
    return participationCount;
  }


  @JsonProperty(JSON_PROPERTY_PARTICIPATION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParticipationCount(Integer participationCount) {
    this.participationCount = participationCount;
  }


  public ExamExerciseStartPreparationStatus startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STARTED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  @JsonProperty(JSON_PROPERTY_STARTED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  /**
   * Return true if this ExamExerciseStartPreparationStatus object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamExerciseStartPreparationStatus examExerciseStartPreparationStatus = (ExamExerciseStartPreparationStatus) o;
    return Objects.equals(this.finished, examExerciseStartPreparationStatus.finished) &&
        Objects.equals(this.failed, examExerciseStartPreparationStatus.failed) &&
        Objects.equals(this.overall, examExerciseStartPreparationStatus.overall) &&
        Objects.equals(this.participationCount, examExerciseStartPreparationStatus.participationCount) &&
        Objects.equals(this.startedAt, examExerciseStartPreparationStatus.startedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(finished, failed, overall, participationCount, startedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamExerciseStartPreparationStatus {\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    participationCount: ").append(toIndentedString(participationCount)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

