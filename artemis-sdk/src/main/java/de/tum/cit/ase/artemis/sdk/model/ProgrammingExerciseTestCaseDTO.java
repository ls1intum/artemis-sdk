/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * ProgrammingExerciseTestCaseDTO
 */
@JsonPropertyOrder({
  ProgrammingExerciseTestCaseDTO.JSON_PROPERTY_ID,
  ProgrammingExerciseTestCaseDTO.JSON_PROPERTY_WEIGHT,
  ProgrammingExerciseTestCaseDTO.JSON_PROPERTY_BONUS_MULTIPLIER,
  ProgrammingExerciseTestCaseDTO.JSON_PROPERTY_BONUS_POINTS,
  ProgrammingExerciseTestCaseDTO.JSON_PROPERTY_VISIBILITY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-06T13:57:19.283407Z[Etc/UTC]")
public class ProgrammingExerciseTestCaseDTO {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Double weight;

  public static final String JSON_PROPERTY_BONUS_MULTIPLIER = "bonusMultiplier";
  private Double bonusMultiplier;

  public static final String JSON_PROPERTY_BONUS_POINTS = "bonusPoints";
  private Double bonusPoints;

  /**
   * Gets or Sets visibility
   */
  public enum VisibilityEnum {
    ALWAYS("ALWAYS"),
    
    AFTER_DUE_DATE("AFTER_DUE_DATE"),
    
    NEVER("NEVER");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  public ProgrammingExerciseTestCaseDTO() { 
  }

  public ProgrammingExerciseTestCaseDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ProgrammingExerciseTestCaseDTO weight(Double weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(Double weight) {
    this.weight = weight;
  }


  public ProgrammingExerciseTestCaseDTO bonusMultiplier(Double bonusMultiplier) {
    this.bonusMultiplier = bonusMultiplier;
    return this;
  }

   /**
   * Get bonusMultiplier
   * @return bonusMultiplier
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BONUS_MULTIPLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getBonusMultiplier() {
    return bonusMultiplier;
  }


  @JsonProperty(JSON_PROPERTY_BONUS_MULTIPLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBonusMultiplier(Double bonusMultiplier) {
    this.bonusMultiplier = bonusMultiplier;
  }


  public ProgrammingExerciseTestCaseDTO bonusPoints(Double bonusPoints) {
    this.bonusPoints = bonusPoints;
    return this;
  }

   /**
   * Get bonusPoints
   * @return bonusPoints
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BONUS_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getBonusPoints() {
    return bonusPoints;
  }


  @JsonProperty(JSON_PROPERTY_BONUS_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBonusPoints(Double bonusPoints) {
    this.bonusPoints = bonusPoints;
  }


  public ProgrammingExerciseTestCaseDTO visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  /**
   * Return true if this ProgrammingExerciseTestCaseDTO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammingExerciseTestCaseDTO programmingExerciseTestCaseDTO = (ProgrammingExerciseTestCaseDTO) o;
    return Objects.equals(this.id, programmingExerciseTestCaseDTO.id) &&
        Objects.equals(this.weight, programmingExerciseTestCaseDTO.weight) &&
        Objects.equals(this.bonusMultiplier, programmingExerciseTestCaseDTO.bonusMultiplier) &&
        Objects.equals(this.bonusPoints, programmingExerciseTestCaseDTO.bonusPoints) &&
        Objects.equals(this.visibility, programmingExerciseTestCaseDTO.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, weight, bonusMultiplier, bonusPoints, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammingExerciseTestCaseDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    bonusMultiplier: ").append(toIndentedString(bonusMultiplier)).append("\n");
    sb.append("    bonusPoints: ").append(toIndentedString(bonusPoints)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

