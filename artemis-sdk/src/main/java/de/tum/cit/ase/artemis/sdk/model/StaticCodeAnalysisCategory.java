/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExercise;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * StaticCodeAnalysisCategory
 */
@JsonPropertyOrder({
  StaticCodeAnalysisCategory.JSON_PROPERTY_ID,
  StaticCodeAnalysisCategory.JSON_PROPERTY_NAME,
  StaticCodeAnalysisCategory.JSON_PROPERTY_PENALTY,
  StaticCodeAnalysisCategory.JSON_PROPERTY_MAX_PENALTY,
  StaticCodeAnalysisCategory.JSON_PROPERTY_STATE,
  StaticCodeAnalysisCategory.JSON_PROPERTY_EXERCISE,
  StaticCodeAnalysisCategory.JSON_PROPERTY_PROGRAMMING_EXERCISE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-02T15:54:21.223567Z[Etc/UTC]")
public class StaticCodeAnalysisCategory {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PENALTY = "penalty";
  private Double penalty;

  public static final String JSON_PROPERTY_MAX_PENALTY = "maxPenalty";
  private Double maxPenalty;

  /**
   * Gets or Sets state
   */
  public enum StateEnum {
    INACTIVE("INACTIVE"),
    
    FEEDBACK("FEEDBACK"),
    
    GRADED("GRADED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  private StateEnum state;

  public static final String JSON_PROPERTY_EXERCISE = "exercise";
  private ProgrammingExercise exercise;

  public static final String JSON_PROPERTY_PROGRAMMING_EXERCISE = "programmingExercise";
  private ProgrammingExercise programmingExercise;

  public StaticCodeAnalysisCategory() { 
  }

  public StaticCodeAnalysisCategory id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public StaticCodeAnalysisCategory name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public StaticCodeAnalysisCategory penalty(Double penalty) {
    this.penalty = penalty;
    return this;
  }

   /**
   * Get penalty
   * @return penalty
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getPenalty() {
    return penalty;
  }


  @JsonProperty(JSON_PROPERTY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPenalty(Double penalty) {
    this.penalty = penalty;
  }


  public StaticCodeAnalysisCategory maxPenalty(Double maxPenalty) {
    this.maxPenalty = maxPenalty;
    return this;
  }

   /**
   * Get maxPenalty
   * @return maxPenalty
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMaxPenalty() {
    return maxPenalty;
  }


  @JsonProperty(JSON_PROPERTY_MAX_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxPenalty(Double maxPenalty) {
    this.maxPenalty = maxPenalty;
  }


  public StaticCodeAnalysisCategory state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(StateEnum state) {
    this.state = state;
  }


  public StaticCodeAnalysisCategory exercise(ProgrammingExercise exercise) {
    this.exercise = exercise;
    return this;
  }

   /**
   * Get exercise
   * @return exercise
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProgrammingExercise getExercise() {
    return exercise;
  }


  @JsonProperty(JSON_PROPERTY_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExercise(ProgrammingExercise exercise) {
    this.exercise = exercise;
  }


  public StaticCodeAnalysisCategory programmingExercise(ProgrammingExercise programmingExercise) {
    this.programmingExercise = programmingExercise;
    return this;
  }

   /**
   * Get programmingExercise
   * @return programmingExercise
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROGRAMMING_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProgrammingExercise getProgrammingExercise() {
    return programmingExercise;
  }


  @JsonProperty(JSON_PROPERTY_PROGRAMMING_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProgrammingExercise(ProgrammingExercise programmingExercise) {
    this.programmingExercise = programmingExercise;
  }


  /**
   * Return true if this StaticCodeAnalysisCategory object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaticCodeAnalysisCategory staticCodeAnalysisCategory = (StaticCodeAnalysisCategory) o;
    return Objects.equals(this.id, staticCodeAnalysisCategory.id) &&
        Objects.equals(this.name, staticCodeAnalysisCategory.name) &&
        Objects.equals(this.penalty, staticCodeAnalysisCategory.penalty) &&
        Objects.equals(this.maxPenalty, staticCodeAnalysisCategory.maxPenalty) &&
        Objects.equals(this.state, staticCodeAnalysisCategory.state) &&
        Objects.equals(this.exercise, staticCodeAnalysisCategory.exercise) &&
        Objects.equals(this.programmingExercise, staticCodeAnalysisCategory.programmingExercise);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, penalty, maxPenalty, state, exercise, programmingExercise);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticCodeAnalysisCategory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    penalty: ").append(toIndentedString(penalty)).append("\n");
    sb.append("    maxPenalty: ").append(toIndentedString(maxPenalty)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    exercise: ").append(toIndentedString(exercise)).append("\n");
    sb.append("    programmingExercise: ").append(toIndentedString(programmingExercise)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

