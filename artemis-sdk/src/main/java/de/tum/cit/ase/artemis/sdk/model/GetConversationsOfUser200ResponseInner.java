/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.ChannelDTO;
import de.tum.cit.ase.artemis.sdk.model.ConversationDTO;
import de.tum.cit.ase.artemis.sdk.model.ConversationUserDTO;
import de.tum.cit.ase.artemis.sdk.model.GroupChatDTO;
import de.tum.cit.ase.artemis.sdk.model.OneToOneChatDTO;
import java.time.OffsetDateTime;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import de.tum.cit.ase.artemis.sdk.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-02T15:54:21.223567Z[Etc/UTC]")
@JsonDeserialize(using = GetConversationsOfUser200ResponseInner.GetConversationsOfUser200ResponseInnerDeserializer.class)
@JsonSerialize(using = GetConversationsOfUser200ResponseInner.GetConversationsOfUser200ResponseInnerSerializer.class)
public class GetConversationsOfUser200ResponseInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetConversationsOfUser200ResponseInner.class.getName());

    public static class GetConversationsOfUser200ResponseInnerSerializer extends StdSerializer<GetConversationsOfUser200ResponseInner> {
        public GetConversationsOfUser200ResponseInnerSerializer(Class<GetConversationsOfUser200ResponseInner> t) {
            super(t);
        }

        public GetConversationsOfUser200ResponseInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(GetConversationsOfUser200ResponseInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class GetConversationsOfUser200ResponseInnerDeserializer extends StdDeserializer<GetConversationsOfUser200ResponseInner> {
        public GetConversationsOfUser200ResponseInnerDeserializer() {
            this(GetConversationsOfUser200ResponseInner.class);
        }

        public GetConversationsOfUser200ResponseInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public GetConversationsOfUser200ResponseInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize ChannelDTO
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ChannelDTO.class.equals(Integer.class) || ChannelDTO.class.equals(Long.class) || ChannelDTO.class.equals(Float.class) || ChannelDTO.class.equals(Double.class) || ChannelDTO.class.equals(Boolean.class) || ChannelDTO.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ChannelDTO.class.equals(Integer.class) || ChannelDTO.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ChannelDTO.class.equals(Float.class) || ChannelDTO.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ChannelDTO.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ChannelDTO.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ChannelDTO.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ChannelDTO'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ChannelDTO'", e);
            }

            // deserialize ConversationDTO
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (ConversationDTO.class.equals(Integer.class) || ConversationDTO.class.equals(Long.class) || ConversationDTO.class.equals(Float.class) || ConversationDTO.class.equals(Double.class) || ConversationDTO.class.equals(Boolean.class) || ConversationDTO.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((ConversationDTO.class.equals(Integer.class) || ConversationDTO.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((ConversationDTO.class.equals(Float.class) || ConversationDTO.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (ConversationDTO.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (ConversationDTO.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(ConversationDTO.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'ConversationDTO'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ConversationDTO'", e);
            }

            // deserialize GroupChatDTO
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (GroupChatDTO.class.equals(Integer.class) || GroupChatDTO.class.equals(Long.class) || GroupChatDTO.class.equals(Float.class) || GroupChatDTO.class.equals(Double.class) || GroupChatDTO.class.equals(Boolean.class) || GroupChatDTO.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((GroupChatDTO.class.equals(Integer.class) || GroupChatDTO.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((GroupChatDTO.class.equals(Float.class) || GroupChatDTO.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (GroupChatDTO.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (GroupChatDTO.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GroupChatDTO.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'GroupChatDTO'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'GroupChatDTO'", e);
            }

            // deserialize OneToOneChatDTO
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (OneToOneChatDTO.class.equals(Integer.class) || OneToOneChatDTO.class.equals(Long.class) || OneToOneChatDTO.class.equals(Float.class) || OneToOneChatDTO.class.equals(Double.class) || OneToOneChatDTO.class.equals(Boolean.class) || OneToOneChatDTO.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((OneToOneChatDTO.class.equals(Integer.class) || OneToOneChatDTO.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((OneToOneChatDTO.class.equals(Float.class) || OneToOneChatDTO.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (OneToOneChatDTO.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (OneToOneChatDTO.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(OneToOneChatDTO.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'OneToOneChatDTO'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'OneToOneChatDTO'", e);
            }

            if (match == 1) {
                GetConversationsOfUser200ResponseInner ret = new GetConversationsOfUser200ResponseInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for GetConversationsOfUser200ResponseInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public GetConversationsOfUser200ResponseInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "GetConversationsOfUser200ResponseInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetConversationsOfUser200ResponseInner() {
        super("oneOf", Boolean.FALSE);
    }

    public GetConversationsOfUser200ResponseInner(ChannelDTO o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetConversationsOfUser200ResponseInner(ConversationDTO o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetConversationsOfUser200ResponseInner(GroupChatDTO o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetConversationsOfUser200ResponseInner(OneToOneChatDTO o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ChannelDTO", new GenericType<ChannelDTO>() {
        });
        schemas.put("ConversationDTO", new GenericType<ConversationDTO>() {
        });
        schemas.put("GroupChatDTO", new GenericType<GroupChatDTO>() {
        });
        schemas.put("OneToOneChatDTO", new GenericType<OneToOneChatDTO>() {
        });
        JSON.registerDescendants(GetConversationsOfUser200ResponseInner.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("ChannelDTO", ChannelDTO.class);
        mappings.put("ConversationDTO", ConversationDTO.class);
        mappings.put("GroupChatDTO", GroupChatDTO.class);
        mappings.put("OneToOneChatDTO", OneToOneChatDTO.class);
        mappings.put("getConversationsOfUser_200_response_inner", GetConversationsOfUser200ResponseInner.class);
        JSON.registerDiscriminator(GetConversationsOfUser200ResponseInner.class, "type", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetConversationsOfUser200ResponseInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ChannelDTO, ConversationDTO, GroupChatDTO, OneToOneChatDTO
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(ChannelDTO.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ConversationDTO.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(GroupChatDTO.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(OneToOneChatDTO.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ChannelDTO, ConversationDTO, GroupChatDTO, OneToOneChatDTO");
    }

    /**
     * Get the actual instance, which can be the following:
     * ChannelDTO, ConversationDTO, GroupChatDTO, OneToOneChatDTO
     *
     * @return The actual instance (ChannelDTO, ConversationDTO, GroupChatDTO, OneToOneChatDTO)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChannelDTO`. If the actual instance is not `ChannelDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelDTO`
     * @throws ClassCastException if the instance is not `ChannelDTO`
     */
    public ChannelDTO getChannelDTO() throws ClassCastException {
        return (ChannelDTO)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConversationDTO`. If the actual instance is not `ConversationDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConversationDTO`
     * @throws ClassCastException if the instance is not `ConversationDTO`
     */
    public ConversationDTO getConversationDTO() throws ClassCastException {
        return (ConversationDTO)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GroupChatDTO`. If the actual instance is not `GroupChatDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GroupChatDTO`
     * @throws ClassCastException if the instance is not `GroupChatDTO`
     */
    public GroupChatDTO getGroupChatDTO() throws ClassCastException {
        return (GroupChatDTO)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OneToOneChatDTO`. If the actual instance is not `OneToOneChatDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OneToOneChatDTO`
     * @throws ClassCastException if the instance is not `OneToOneChatDTO`
     */
    public OneToOneChatDTO getOneToOneChatDTO() throws ClassCastException {
        return (OneToOneChatDTO)super.getActualInstance();
    }

}

