/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.tum.cit.ase.artemis.sdk.model.Course;
import de.tum.cit.ase.artemis.sdk.model.GetExercise200Response;
import de.tum.cit.ase.artemis.sdk.model.LearningGoalProgress;
import de.tum.cit.ase.artemis.sdk.model.LectureUnit;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * LearningGoal
 */
@JsonPropertyOrder({
  LearningGoal.JSON_PROPERTY_ID,
  LearningGoal.JSON_PROPERTY_TITLE,
  LearningGoal.JSON_PROPERTY_DESCRIPTION,
  LearningGoal.JSON_PROPERTY_MASTERY_THRESHOLD,
  LearningGoal.JSON_PROPERTY_TAXONOMY,
  LearningGoal.JSON_PROPERTY_COURSE,
  LearningGoal.JSON_PROPERTY_EXERCISES,
  LearningGoal.JSON_PROPERTY_LECTURE_UNITS,
  LearningGoal.JSON_PROPERTY_CONSECUTIVE_COURSES,
  LearningGoal.JSON_PROPERTY_USER_PROGRESS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-27T15:31:11.360443Z[Etc/UTC]")
public class LearningGoal {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_MASTERY_THRESHOLD = "masteryThreshold";
  private Integer masteryThreshold;

  /**
   * Gets or Sets taxonomy
   */
  public enum TaxonomyEnum {
    REMEMBER("REMEMBER"),
    
    UNDERSTAND("UNDERSTAND"),
    
    APPLY("APPLY"),
    
    ANALYZE("ANALYZE"),
    
    EVALUATE("EVALUATE"),
    
    CREATE("CREATE");

    private String value;

    TaxonomyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TaxonomyEnum fromValue(String value) {
      for (TaxonomyEnum b : TaxonomyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TAXONOMY = "taxonomy";
  private TaxonomyEnum taxonomy;

  public static final String JSON_PROPERTY_COURSE = "course";
  private Course course;

  public static final String JSON_PROPERTY_EXERCISES = "exercises";
  private Set<GetExercise200Response> exercises = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_LECTURE_UNITS = "lectureUnits";
  private Set<LectureUnit> lectureUnits = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_CONSECUTIVE_COURSES = "consecutiveCourses";
  private Set<Course> consecutiveCourses = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_USER_PROGRESS = "userProgress";
  private Set<LearningGoalProgress> userProgress = new LinkedHashSet<>();

  public LearningGoal() { 
  }

  public LearningGoal id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public LearningGoal title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
  }


  public LearningGoal description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public LearningGoal masteryThreshold(Integer masteryThreshold) {
    this.masteryThreshold = masteryThreshold;
    return this;
  }

   /**
   * Get masteryThreshold
   * @return masteryThreshold
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASTERY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMasteryThreshold() {
    return masteryThreshold;
  }


  @JsonProperty(JSON_PROPERTY_MASTERY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasteryThreshold(Integer masteryThreshold) {
    this.masteryThreshold = masteryThreshold;
  }


  public LearningGoal taxonomy(TaxonomyEnum taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

   /**
   * Get taxonomy
   * @return taxonomy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXONOMY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaxonomyEnum getTaxonomy() {
    return taxonomy;
  }


  @JsonProperty(JSON_PROPERTY_TAXONOMY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxonomy(TaxonomyEnum taxonomy) {
    this.taxonomy = taxonomy;
  }


  public LearningGoal course(Course course) {
    this.course = course;
    return this;
  }

   /**
   * Get course
   * @return course
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COURSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Course getCourse() {
    return course;
  }


  @JsonProperty(JSON_PROPERTY_COURSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCourse(Course course) {
    this.course = course;
  }


  public LearningGoal exercises(Set<GetExercise200Response> exercises) {
    this.exercises = exercises;
    return this;
  }

  public LearningGoal addExercisesItem(GetExercise200Response exercisesItem) {
    if (this.exercises == null) {
      this.exercises = new LinkedHashSet<>();
    }
    this.exercises.add(exercisesItem);
    return this;
  }

   /**
   * Get exercises
   * @return exercises
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXERCISES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<GetExercise200Response> getExercises() {
    return exercises;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_EXERCISES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExercises(Set<GetExercise200Response> exercises) {
    this.exercises = exercises;
  }


  public LearningGoal lectureUnits(Set<LectureUnit> lectureUnits) {
    this.lectureUnits = lectureUnits;
    return this;
  }

  public LearningGoal addLectureUnitsItem(LectureUnit lectureUnitsItem) {
    if (this.lectureUnits == null) {
      this.lectureUnits = new LinkedHashSet<>();
    }
    this.lectureUnits.add(lectureUnitsItem);
    return this;
  }

   /**
   * Get lectureUnits
   * @return lectureUnits
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LECTURE_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LectureUnit> getLectureUnits() {
    return lectureUnits;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LECTURE_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLectureUnits(Set<LectureUnit> lectureUnits) {
    this.lectureUnits = lectureUnits;
  }


  public LearningGoal consecutiveCourses(Set<Course> consecutiveCourses) {
    this.consecutiveCourses = consecutiveCourses;
    return this;
  }

  public LearningGoal addConsecutiveCoursesItem(Course consecutiveCoursesItem) {
    if (this.consecutiveCourses == null) {
      this.consecutiveCourses = new LinkedHashSet<>();
    }
    this.consecutiveCourses.add(consecutiveCoursesItem);
    return this;
  }

   /**
   * Get consecutiveCourses
   * @return consecutiveCourses
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSECUTIVE_COURSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Course> getConsecutiveCourses() {
    return consecutiveCourses;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_CONSECUTIVE_COURSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsecutiveCourses(Set<Course> consecutiveCourses) {
    this.consecutiveCourses = consecutiveCourses;
  }


  public LearningGoal userProgress(Set<LearningGoalProgress> userProgress) {
    this.userProgress = userProgress;
    return this;
  }

  public LearningGoal addUserProgressItem(LearningGoalProgress userProgressItem) {
    if (this.userProgress == null) {
      this.userProgress = new LinkedHashSet<>();
    }
    this.userProgress.add(userProgressItem);
    return this;
  }

   /**
   * Get userProgress
   * @return userProgress
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LearningGoalProgress> getUserProgress() {
    return userProgress;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_USER_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserProgress(Set<LearningGoalProgress> userProgress) {
    this.userProgress = userProgress;
  }


  /**
   * Return true if this LearningGoal object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGoal learningGoal = (LearningGoal) o;
    return Objects.equals(this.id, learningGoal.id) &&
        Objects.equals(this.title, learningGoal.title) &&
        Objects.equals(this.description, learningGoal.description) &&
        Objects.equals(this.masteryThreshold, learningGoal.masteryThreshold) &&
        Objects.equals(this.taxonomy, learningGoal.taxonomy) &&
        Objects.equals(this.course, learningGoal.course) &&
        Objects.equals(this.exercises, learningGoal.exercises) &&
        Objects.equals(this.lectureUnits, learningGoal.lectureUnits) &&
        Objects.equals(this.consecutiveCourses, learningGoal.consecutiveCourses) &&
        Objects.equals(this.userProgress, learningGoal.userProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, description, masteryThreshold, taxonomy, course, exercises, lectureUnits, consecutiveCourses, userProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGoal {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    masteryThreshold: ").append(toIndentedString(masteryThreshold)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    course: ").append(toIndentedString(course)).append("\n");
    sb.append("    exercises: ").append(toIndentedString(exercises)).append("\n");
    sb.append("    lectureUnits: ").append(toIndentedString(lectureUnits)).append("\n");
    sb.append("    consecutiveCourses: ").append(toIndentedString(consecutiveCourses)).append("\n");
    sb.append("    userProgress: ").append(toIndentedString(userProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

