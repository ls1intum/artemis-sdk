/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.StudentExam;
import de.tum.cit.ase.artemis.sdk.model.StudentResult;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * StudentExamWithGradeDTO
 */
@JsonPropertyOrder({
  StudentExamWithGradeDTO.JSON_PROPERTY_MAX_POINTS,
  StudentExamWithGradeDTO.JSON_PROPERTY_MAX_BONUS_POINTS,
  StudentExamWithGradeDTO.JSON_PROPERTY_GRADE_TYPE,
  StudentExamWithGradeDTO.JSON_PROPERTY_STUDENT_EXAM,
  StudentExamWithGradeDTO.JSON_PROPERTY_STUDENT_RESULT,
  StudentExamWithGradeDTO.JSON_PROPERTY_ACHIEVED_POINTS_PER_EXERCISE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-27T15:31:11.360443Z[Etc/UTC]")
public class StudentExamWithGradeDTO {
  public static final String JSON_PROPERTY_MAX_POINTS = "maxPoints";
  private Double maxPoints;

  public static final String JSON_PROPERTY_MAX_BONUS_POINTS = "maxBonusPoints";
  private Double maxBonusPoints;

  /**
   * Gets or Sets gradeType
   */
  public enum GradeTypeEnum {
    NONE("NONE"),
    
    BONUS("BONUS"),
    
    GRADE("GRADE");

    private String value;

    GradeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GradeTypeEnum fromValue(String value) {
      for (GradeTypeEnum b : GradeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_GRADE_TYPE = "gradeType";
  private GradeTypeEnum gradeType;

  public static final String JSON_PROPERTY_STUDENT_EXAM = "studentExam";
  private StudentExam studentExam;

  public static final String JSON_PROPERTY_STUDENT_RESULT = "studentResult";
  private StudentResult studentResult;

  public static final String JSON_PROPERTY_ACHIEVED_POINTS_PER_EXERCISE = "achievedPointsPerExercise";
  private Map<String, Double> achievedPointsPerExercise = new HashMap<>();

  public StudentExamWithGradeDTO() { 
  }

  public StudentExamWithGradeDTO maxPoints(Double maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

   /**
   * Get maxPoints
   * @return maxPoints
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMaxPoints() {
    return maxPoints;
  }


  @JsonProperty(JSON_PROPERTY_MAX_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxPoints(Double maxPoints) {
    this.maxPoints = maxPoints;
  }


  public StudentExamWithGradeDTO maxBonusPoints(Double maxBonusPoints) {
    this.maxBonusPoints = maxBonusPoints;
    return this;
  }

   /**
   * Get maxBonusPoints
   * @return maxBonusPoints
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_BONUS_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMaxBonusPoints() {
    return maxBonusPoints;
  }


  @JsonProperty(JSON_PROPERTY_MAX_BONUS_POINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxBonusPoints(Double maxBonusPoints) {
    this.maxBonusPoints = maxBonusPoints;
  }


  public StudentExamWithGradeDTO gradeType(GradeTypeEnum gradeType) {
    this.gradeType = gradeType;
    return this;
  }

   /**
   * Get gradeType
   * @return gradeType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GradeTypeEnum getGradeType() {
    return gradeType;
  }


  @JsonProperty(JSON_PROPERTY_GRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGradeType(GradeTypeEnum gradeType) {
    this.gradeType = gradeType;
  }


  public StudentExamWithGradeDTO studentExam(StudentExam studentExam) {
    this.studentExam = studentExam;
    return this;
  }

   /**
   * Get studentExam
   * @return studentExam
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STUDENT_EXAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StudentExam getStudentExam() {
    return studentExam;
  }


  @JsonProperty(JSON_PROPERTY_STUDENT_EXAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStudentExam(StudentExam studentExam) {
    this.studentExam = studentExam;
  }


  public StudentExamWithGradeDTO studentResult(StudentResult studentResult) {
    this.studentResult = studentResult;
    return this;
  }

   /**
   * Get studentResult
   * @return studentResult
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STUDENT_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StudentResult getStudentResult() {
    return studentResult;
  }


  @JsonProperty(JSON_PROPERTY_STUDENT_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStudentResult(StudentResult studentResult) {
    this.studentResult = studentResult;
  }


  public StudentExamWithGradeDTO achievedPointsPerExercise(Map<String, Double> achievedPointsPerExercise) {
    this.achievedPointsPerExercise = achievedPointsPerExercise;
    return this;
  }

  public StudentExamWithGradeDTO putAchievedPointsPerExerciseItem(String key, Double achievedPointsPerExerciseItem) {
    if (this.achievedPointsPerExercise == null) {
      this.achievedPointsPerExercise = new HashMap<>();
    }
    this.achievedPointsPerExercise.put(key, achievedPointsPerExerciseItem);
    return this;
  }

   /**
   * Get achievedPointsPerExercise
   * @return achievedPointsPerExercise
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACHIEVED_POINTS_PER_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Double> getAchievedPointsPerExercise() {
    return achievedPointsPerExercise;
  }


  @JsonProperty(JSON_PROPERTY_ACHIEVED_POINTS_PER_EXERCISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAchievedPointsPerExercise(Map<String, Double> achievedPointsPerExercise) {
    this.achievedPointsPerExercise = achievedPointsPerExercise;
  }


  /**
   * Return true if this StudentExamWithGradeDTO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StudentExamWithGradeDTO studentExamWithGradeDTO = (StudentExamWithGradeDTO) o;
    return Objects.equals(this.maxPoints, studentExamWithGradeDTO.maxPoints) &&
        Objects.equals(this.maxBonusPoints, studentExamWithGradeDTO.maxBonusPoints) &&
        Objects.equals(this.gradeType, studentExamWithGradeDTO.gradeType) &&
        Objects.equals(this.studentExam, studentExamWithGradeDTO.studentExam) &&
        Objects.equals(this.studentResult, studentExamWithGradeDTO.studentResult) &&
        Objects.equals(this.achievedPointsPerExercise, studentExamWithGradeDTO.achievedPointsPerExercise);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPoints, maxBonusPoints, gradeType, studentExam, studentResult, achievedPointsPerExercise);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StudentExamWithGradeDTO {\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    maxBonusPoints: ").append(toIndentedString(maxBonusPoints)).append("\n");
    sb.append("    gradeType: ").append(toIndentedString(gradeType)).append("\n");
    sb.append("    studentExam: ").append(toIndentedString(studentExam)).append("\n");
    sb.append("    studentResult: ").append(toIndentedString(studentResult)).append("\n");
    sb.append("    achievedPointsPerExercise: ").append(toIndentedString(achievedPointsPerExercise)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

