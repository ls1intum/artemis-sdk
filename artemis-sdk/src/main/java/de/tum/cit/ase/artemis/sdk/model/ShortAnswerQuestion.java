/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.DragAndDropQuestion;
import de.tum.cit.ase.artemis.sdk.model.MultipleChoiceQuestion;
import de.tum.cit.ase.artemis.sdk.model.QuizQuestion;
import de.tum.cit.ase.artemis.sdk.model.QuizQuestionStatistic;
import de.tum.cit.ase.artemis.sdk.model.ShortAnswerMapping;
import de.tum.cit.ase.artemis.sdk.model.ShortAnswerQuestion;
import de.tum.cit.ase.artemis.sdk.model.ShortAnswerSolution;
import de.tum.cit.ase.artemis.sdk.model.ShortAnswerSpot;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.tum.cit.ase.artemis.sdk.JSON;


/**
 * ShortAnswerQuestion
 */
@JsonPropertyOrder({
  ShortAnswerQuestion.JSON_PROPERTY_SPOTS,
  ShortAnswerQuestion.JSON_PROPERTY_SOLUTIONS,
  ShortAnswerQuestion.JSON_PROPERTY_CORRECT_MAPPINGS,
  ShortAnswerQuestion.JSON_PROPERTY_SIMILARITY_VALUE,
  ShortAnswerQuestion.JSON_PROPERTY_MATCH_LETTER_CASE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-30T13:56:33.435320Z[Etc/UTC]")
@JsonTypeName("short-answer")

public class ShortAnswerQuestion extends QuizQuestion {
  public static final String JSON_PROPERTY_SPOTS = "spots";
  private List<ShortAnswerSpot> spots = new ArrayList<>();

  public static final String JSON_PROPERTY_SOLUTIONS = "solutions";
  private List<ShortAnswerSolution> solutions = new ArrayList<>();

  public static final String JSON_PROPERTY_CORRECT_MAPPINGS = "correctMappings";
  private List<ShortAnswerMapping> correctMappings = new ArrayList<>();

  public static final String JSON_PROPERTY_SIMILARITY_VALUE = "similarityValue";
  private Integer similarityValue;

  public static final String JSON_PROPERTY_MATCH_LETTER_CASE = "matchLetterCase";
  private Boolean matchLetterCase;

  public ShortAnswerQuestion() { 
  }

  public ShortAnswerQuestion spots(List<ShortAnswerSpot> spots) {
    this.spots = spots;
    return this;
  }

  public ShortAnswerQuestion addSpotsItem(ShortAnswerSpot spotsItem) {
    if (this.spots == null) {
      this.spots = new ArrayList<>();
    }
    this.spots.add(spotsItem);
    return this;
  }

   /**
   * Get spots
   * @return spots
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ShortAnswerSpot> getSpots() {
    return spots;
  }


  @JsonProperty(JSON_PROPERTY_SPOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpots(List<ShortAnswerSpot> spots) {
    this.spots = spots;
  }


  public ShortAnswerQuestion solutions(List<ShortAnswerSolution> solutions) {
    this.solutions = solutions;
    return this;
  }

  public ShortAnswerQuestion addSolutionsItem(ShortAnswerSolution solutionsItem) {
    if (this.solutions == null) {
      this.solutions = new ArrayList<>();
    }
    this.solutions.add(solutionsItem);
    return this;
  }

   /**
   * Get solutions
   * @return solutions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOLUTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ShortAnswerSolution> getSolutions() {
    return solutions;
  }


  @JsonProperty(JSON_PROPERTY_SOLUTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSolutions(List<ShortAnswerSolution> solutions) {
    this.solutions = solutions;
  }


  public ShortAnswerQuestion correctMappings(List<ShortAnswerMapping> correctMappings) {
    this.correctMappings = correctMappings;
    return this;
  }

  public ShortAnswerQuestion addCorrectMappingsItem(ShortAnswerMapping correctMappingsItem) {
    if (this.correctMappings == null) {
      this.correctMappings = new ArrayList<>();
    }
    this.correctMappings.add(correctMappingsItem);
    return this;
  }

   /**
   * Get correctMappings
   * @return correctMappings
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CORRECT_MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ShortAnswerMapping> getCorrectMappings() {
    return correctMappings;
  }


  @JsonProperty(JSON_PROPERTY_CORRECT_MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCorrectMappings(List<ShortAnswerMapping> correctMappings) {
    this.correctMappings = correctMappings;
  }


  public ShortAnswerQuestion similarityValue(Integer similarityValue) {
    this.similarityValue = similarityValue;
    return this;
  }

   /**
   * Get similarityValue
   * @return similarityValue
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIMILARITY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSimilarityValue() {
    return similarityValue;
  }


  @JsonProperty(JSON_PROPERTY_SIMILARITY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimilarityValue(Integer similarityValue) {
    this.similarityValue = similarityValue;
  }


  public ShortAnswerQuestion matchLetterCase(Boolean matchLetterCase) {
    this.matchLetterCase = matchLetterCase;
    return this;
  }

   /**
   * Get matchLetterCase
   * @return matchLetterCase
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MATCH_LETTER_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMatchLetterCase() {
    return matchLetterCase;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_LETTER_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchLetterCase(Boolean matchLetterCase) {
    this.matchLetterCase = matchLetterCase;
  }


  /**
   * Return true if this ShortAnswerQuestion object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShortAnswerQuestion shortAnswerQuestion = (ShortAnswerQuestion) o;
    return Objects.equals(this.spots, shortAnswerQuestion.spots) &&
        Objects.equals(this.solutions, shortAnswerQuestion.solutions) &&
        Objects.equals(this.correctMappings, shortAnswerQuestion.correctMappings) &&
        Objects.equals(this.similarityValue, shortAnswerQuestion.similarityValue) &&
        Objects.equals(this.matchLetterCase, shortAnswerQuestion.matchLetterCase) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spots, solutions, correctMappings, similarityValue, matchLetterCase, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShortAnswerQuestion {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    spots: ").append(toIndentedString(spots)).append("\n");
    sb.append("    solutions: ").append(toIndentedString(solutions)).append("\n");
    sb.append("    correctMappings: ").append(toIndentedString(correctMappings)).append("\n");
    sb.append("    similarityValue: ").append(toIndentedString(similarityValue)).append("\n");
    sb.append("    matchLetterCase: ").append(toIndentedString(matchLetterCase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("drag-and-drop", DragAndDropQuestion.class);
  mappings.put("multiple-choice", MultipleChoiceQuestion.class);
  mappings.put("short-answer", ShortAnswerQuestion.class);
  mappings.put("ShortAnswerQuestion", ShortAnswerQuestion.class);
  JSON.registerDiscriminator(ShortAnswerQuestion.class, "type", mappings);
}
}

