/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.api;

import de.tum.cit.ase.artemis.sdk.*;
import de.tum.cit.ase.artemis.sdk.auth.*;
import de.tum.cit.ase.artemis.sdk.model.CleanupBuildPlan200Response;
import de.tum.cit.ase.artemis.sdk.model.GetAllTextSubmissions200ResponseInner;
import de.tum.cit.ase.artemis.sdk.model.MappingJacksonValue;
import de.tum.cit.ase.artemis.sdk.model.ProgrammingExerciseStudentParticipation;
import java.util.Set;
import de.tum.cit.ase.artemis.sdk.model.StudentParticipation;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ParticipationResourceApi
 */
public class ParticipationResourceApiTest {

    private final ParticipationResourceApi api = new ParticipationResourceApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cleanupBuildPlanTest() throws ApiException {
        //Long participationId = null;
        //CleanupBuildPlan200Response response = api.cleanupBuildPlan(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteParticipationTest() throws ApiException {
        //Long participationId = null;
        //Boolean deleteBuildPlan = null;
        //Boolean deleteRepository = null;
        //api.deleteParticipation(participationId, deleteBuildPlan, deleteRepository);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteParticipationForGuidedTourTest() throws ApiException {
        //Long participationId = null;
        //Boolean deleteBuildPlan = null;
        //Boolean deleteRepository = null;
        //api.deleteParticipationForGuidedTour(participationId, deleteBuildPlan, deleteRepository);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllParticipationsForCourseTest() throws ApiException {
        //Long courseId = null;
        //List<StudentParticipation> response = api.getAllParticipationsForCourse(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllParticipationsForExerciseTest() throws ApiException {
        //Long exerciseId = null;
        //Boolean withLatestResults = null;
        //Set<StudentParticipation> response = api.getAllParticipationsForExercise(exerciseId, withLatestResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParticipationBuildArtifactTest() throws ApiException {
        //Long participationId = null;
        //List<byte[]> response = api.getParticipationBuildArtifact(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParticipationForCurrentUserTest() throws ApiException {
        //Long participationId = null;
        //StudentParticipation response = api.getParticipationForCurrentUser(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParticipationForCurrentUser1Test() throws ApiException {
        //Long exerciseId = null;
        //MappingJacksonValue response = api.getParticipationForCurrentUser1(exerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParticipationWithLatestResultTest() throws ApiException {
        //Long participationId = null;
        //StudentParticipation response = api.getParticipationWithLatestResult(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubmissionsOfParticipationTest() throws ApiException {
        //Long participationId = null;
        //List<GetAllTextSubmissions200ResponseInner> response = api.getSubmissionsOfParticipation(participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestFeedbackTest() throws ApiException {
        //Long exerciseId = null;
        //ProgrammingExerciseStudentParticipation response = api.requestFeedback(exerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeParticipationTest() throws ApiException {
        //Long exerciseId = null;
        //Long participationId = null;
        //ProgrammingExerciseStudentParticipation response = api.resumeParticipation(exerciseId, participationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startParticipationTest() throws ApiException {
        //Long exerciseId = null;
        //CleanupBuildPlan200Response response = api.startParticipation(exerciseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPracticeParticipationTest() throws ApiException {
        //Long exerciseId = null;
        //Boolean useGradedParticipation = null;
        //CleanupBuildPlan200Response response = api.startPracticeParticipation(exerciseId, useGradedParticipation);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParticipationTest() throws ApiException {
        //Long exerciseId = null;
        //StudentParticipation studentParticipation = null;
        //CleanupBuildPlan200Response response = api.updateParticipation(exerciseId, studentParticipation);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParticipationDueDatesTest() throws ApiException {
        //Long exerciseId = null;
        //List<StudentParticipation> studentParticipation = null;
        //List<StudentParticipation> response = api.updateParticipationDueDates(exerciseId, studentParticipation);
        // TODO: test validations
    }

}
