/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.tum.cit.ase.artemis.sdk.model.IPAddressNetworkObjectObjectObjectObjectObject;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for IPAddressSegment
 */
public class IPAddressSegmentTest {
    private final IPAddressSegment model = new IPAddressSegment();

    /**
     * Model tests for IPAddressSegment
     */
    @Test
    public void testIPAddressSegment() {
        // TODO: test IPAddressSegment
    }

    /**
     * Test the property 'value'
     */
    @Test
    public void valueTest() {
        // TODO: test value
    }

    /**
     * Test the property 'upperValue'
     */
    @Test
    public void upperValueTest() {
        // TODO: test upperValue
    }

    /**
     * Test the property 'count'
     */
    @Test
    public void countTest() {
        // TODO: test count
    }

    /**
     * Test the property 'lower'
     */
    @Test
    public void lowerTest() {
        // TODO: test lower
    }

    /**
     * Test the property 'upper'
     */
    @Test
    public void upperTest() {
        // TODO: test upper
    }

    /**
     * Test the property 'upperSegmentValue'
     */
    @Test
    public void upperSegmentValueTest() {
        // TODO: test upperSegmentValue
    }

    /**
     * Test the property 'upperDivisionValue'
     */
    @Test
    public void upperDivisionValueTest() {
        // TODO: test upperDivisionValue
    }

    /**
     * Test the property 'divisionValue'
     */
    @Test
    public void divisionValueTest() {
        // TODO: test divisionValue
    }

    /**
     * Test the property 'valueCount'
     */
    @Test
    public void valueCountTest() {
        // TODO: test valueCount
    }

    /**
     * Test the property 'segmentValue'
     */
    @Test
    public void segmentValueTest() {
        // TODO: test segmentValue
    }

    /**
     * Test the property 'ipv4'
     */
    @Test
    public void ipv4Test() {
        // TODO: test ipv4
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'iterable'
     */
    @Test
    public void iterableTest() {
        // TODO: test iterable
    }

    /**
     * Test the property 'ipversion'
     */
    @Test
    public void ipversionTest() {
        // TODO: test ipversion
    }

    /**
     * Test the property 'prefixBlock'
     */
    @Test
    public void prefixBlockTest() {
        // TODO: test prefixBlock
    }

    /**
     * Test the property 'segmentPrefixLength'
     */
    @Test
    public void segmentPrefixLengthTest() {
        // TODO: test segmentPrefixLength
    }

    /**
     * Test the property 'minPrefixLengthForBlock'
     */
    @Test
    public void minPrefixLengthForBlockTest() {
        // TODO: test minPrefixLengthForBlock
    }

    /**
     * Test the property 'prefixValueCount'
     */
    @Test
    public void prefixValueCountTest() {
        // TODO: test prefixValueCount
    }

    /**
     * Test the property 'maxValue'
     */
    @Test
    public void maxValueTest() {
        // TODO: test maxValue
    }

    /**
     * Test the property 'ipv6'
     */
    @Test
    public void ipv6Test() {
        // TODO: test ipv6
    }

    /**
     * Test the property 'multiple'
     */
    @Test
    public void multipleTest() {
        // TODO: test multiple
    }

    /**
     * Test the property 'maxSegmentValue'
     */
    @Test
    public void maxSegmentValueTest() {
        // TODO: test maxSegmentValue
    }

    /**
     * Test the property 'bytes'
     */
    @Test
    public void bytesTest() {
        // TODO: test bytes
    }

    /**
     * Test the property 'zero'
     */
    @Test
    public void zeroTest() {
        // TODO: test zero
    }

    /**
     * Test the property 'byteCount'
     */
    @Test
    public void byteCountTest() {
        // TODO: test byteCount
    }

    /**
     * Test the property 'bitCount'
     */
    @Test
    public void bitCountTest() {
        // TODO: test bitCount
    }

    /**
     * Test the property 'prefixLengthForSingleBlock'
     */
    @Test
    public void prefixLengthForSingleBlockTest() {
        // TODO: test prefixLengthForSingleBlock
    }

    /**
     * Test the property 'fullRange'
     */
    @Test
    public void fullRangeTest() {
        // TODO: test fullRange
    }

    /**
     * Test the property 'upperBytes'
     */
    @Test
    public void upperBytesTest() {
        // TODO: test upperBytes
    }

    /**
     * Test the property 'max'
     */
    @Test
    public void maxTest() {
        // TODO: test max
    }

    /**
     * Test the property 'string'
     */
    @Test
    public void stringTest() {
        // TODO: test string
    }

    /**
     * Test the property 'divisionPrefixLength'
     */
    @Test
    public void divisionPrefixLengthTest() {
        // TODO: test divisionPrefixLength
    }

    /**
     * Test the property 'wildcardString'
     */
    @Test
    public void wildcardStringTest() {
        // TODO: test wildcardString
    }

    /**
     * Test the property 'prefixed'
     */
    @Test
    public void prefixedTest() {
        // TODO: test prefixed
    }

    /**
     * Test the property 'singlePrefixBlock'
     */
    @Test
    public void singlePrefixBlockTest() {
        // TODO: test singlePrefixBlock
    }

}
