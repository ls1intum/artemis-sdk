/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.api;

import de.tum.cit.ase.artemis.sdk.*;
import de.tum.cit.ase.artemis.sdk.auth.*;
import de.tum.cit.ase.artemis.sdk.model.ConversationUserDTO;
import de.tum.cit.ase.artemis.sdk.model.GetAllConversationsForNotifications200ResponseInner;
import de.tum.cit.ase.artemis.sdk.model.GetConversationsOfUser200ResponseInner;
import de.tum.cit.ase.artemis.sdk.model.Pageable;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationResourceApi
 */
public class ConversationResourceApiTest {

    private final ConversationResourceApi api = new ConversationResourceApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeFavoriteStatusTest() throws ApiException {
        //Long courseId = null;
        //Long conversationId = null;
        //Boolean isFavorite = null;
        //api.changeFavoriteStatus(courseId, conversationId, isFavorite);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllConversationsForNotificationsTest() throws ApiException {
        //List<GetAllConversationsForNotifications200ResponseInner> response = api.getAllConversationsForNotifications();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationsOfUserTest() throws ApiException {
        //Long courseId = null;
        //List<GetConversationsOfUser200ResponseInner> response = api.getConversationsOfUser(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hasUnreadMessagesTest() throws ApiException {
        //Long courseId = null;
        //Boolean response = api.hasUnreadMessages(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMembersOfConversationTest() throws ApiException {
        //Long courseId = null;
        //Long conversationId = null;
        //String loginOrName = null;
        //Pageable pageable = null;
        //String filter = null;
        //List<ConversationUserDTO> response = api.searchMembersOfConversation(courseId, conversationId, loginOrName, pageable, filter);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void switchHiddenStatusTest() throws ApiException {
        //Long courseId = null;
        //Long conversationId = null;
        //Boolean isHidden = null;
        //api.switchHiddenStatus(courseId, conversationId, isHidden);
        // TODO: test validations
    }

}
