/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.tum.cit.ase.artemis.sdk.api;

import de.tum.cit.ase.artemis.sdk.*;
import de.tum.cit.ase.artemis.sdk.auth.*;
import de.tum.cit.ase.artemis.sdk.model.Competency;
import de.tum.cit.ase.artemis.sdk.model.CompetencyProgress;
import de.tum.cit.ase.artemis.sdk.model.CompetencyRelation;
import de.tum.cit.ase.artemis.sdk.model.CourseCompetencyProgressDTO;
import de.tum.cit.ase.artemis.sdk.model.PageableSearchDTOString;
import de.tum.cit.ase.artemis.sdk.model.SearchResultPageDTOCompetency;
import java.util.Set;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompetencyResourceApi
 */
public class CompetencyResourceApiTest {

    private final CompetencyResourceApi api = new CompetencyResourceApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPrerequisiteTest() throws ApiException {
        //Long competencyId = null;
        //Long courseId = null;
        //Competency response = api.addPrerequisite(competencyId, courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompetencyTest() throws ApiException {
        //Long courseId = null;
        //Competency competency = null;
        //Competency response = api.createCompetency(courseId, competency);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompetencyRelationTest() throws ApiException {
        //Long courseId = null;
        //Long tailCompetencyId = null;
        //Long headCompetencyId = null;
        //String type = null;
        //CompetencyRelation response = api.createCompetencyRelation(courseId, tailCompetencyId, headCompetencyId, type);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCompetencyTest() throws ApiException {
        //Long competencyId = null;
        //Long courseId = null;
        //api.deleteCompetency(competencyId, courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCompetenciesOnPageTest() throws ApiException {
        //PageableSearchDTOString search = null;
        //SearchResultPageDTOCompetency response = api.getAllCompetenciesOnPage(search);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetenciesTest() throws ApiException {
        //Long courseId = null;
        //List<Competency> response = api.getCompetencies(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetencyTest() throws ApiException {
        //Long competencyId = null;
        //Long courseId = null;
        //Competency response = api.getCompetency(competencyId, courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetencyCourseProgressTest() throws ApiException {
        //Long courseId = null;
        //Long competencyId = null;
        //CourseCompetencyProgressDTO response = api.getCompetencyCourseProgress(courseId, competencyId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetencyRelationsTest() throws ApiException {
        //Long competencyId = null;
        //Long courseId = null;
        //Set<CompetencyRelation> response = api.getCompetencyRelations(competencyId, courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetencyStudentProgressTest() throws ApiException {
        //Long courseId = null;
        //Long competencyId = null;
        //Boolean refresh = null;
        //CompetencyProgress response = api.getCompetencyStudentProgress(courseId, competencyId, refresh);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetencyTitleTest() throws ApiException {
        //Long competencyId = null;
        //String response = api.getCompetencyTitle(competencyId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrerequisitesTest() throws ApiException {
        //Long courseId = null;
        //List<Competency> response = api.getPrerequisites(courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importCompetencyTest() throws ApiException {
        //Long courseId = null;
        //Competency competency = null;
        //Competency response = api.importCompetency(courseId, competency);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCompetencyRelationTest() throws ApiException {
        //Long competencyId = null;
        //Long courseId = null;
        //Long competencyRelationId = null;
        //api.removeCompetencyRelation(competencyId, courseId, competencyRelationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePrerequisiteTest() throws ApiException {
        //Long competencyId = null;
        //Long courseId = null;
        //api.removePrerequisite(competencyId, courseId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompetencyTest() throws ApiException {
        //Long courseId = null;
        //Competency competency = null;
        //Competency response = api.updateCompetency(courseId, competency);
        // TODO: test validations
    }

}
